//
// FOnline: 2238
// Rotators
//
// trader.fos
//

//
// Generic trader script
//

#include "_macros.fos"
#include "economy_h.fos"
#include "trader_h.fos"
#include "utils_h.fos"
#include "_maps.fos"
#include "_dialogs.fos"
#include "broadcast_h.fos"
#include "item_bonus.fos"

#define BROADCAST_DISPLAY_TIME                   (30) // in seconds, for finish messages

import void InjectValue(uint x, uint y, uint amount, uint from) from "worldmap";
//import void AddBonusOrNot(Item@ it) from "item_bonus";
//import void AddSpecialBonus(Item@ it) from "item_bonus";

// Send relevant prices to client
bool _OnBarter(Critter& cr, Critter& player, bool attach, uint barterCount)
{
    if(!attach)
        return false;

    /*int[] data;
       int[] ammo; // additional ammo array that will be appended on the end
       Item@[] items;
       uint itemCount = cr.GetItems(SLOT_INV, items);
        uint pitemCount = player.GetItems(SLOT_INV, items);

       itemCount+= pitemCount;

       for(uint i = 0; i < itemCount; i++)
       {
                if(items[i].GetProtoId() == PID_BOTTLE_CAPS)
                        continue;

                bool found = false;
                for(uint j = 0, k = data.length(); j < k; j+=2)
                {
                        if(data[j] == items[i].GetProtoId())
                        {
                                found = true;
                                break;
                        }
                }
                if(!found)
                {
                        uint idx = data.length();
                        data.resize(data.length()+2);
                        data[idx] = items[i].GetProtoId();
                        data[idx+1] = items[i].Proto.Cost;
                        DLog("Price of PID " + data[idx] + ": " + data[idx+1]);
                }

                // if trader has a weapon with no ammo for example, and player has same weapon with some ammo, the weapon with no ammo is already found, problem is that when it searched the first gun,
                // it didn't contain ammo, so it didn't send ammo price and blocks all other item of same type.
                // that's why code needs to be here
                if (items[i].GetType() == ITEM_TYPE_WEAPON && items[i].AmmoPid>0 && items[i].AmmoPid!=65535)
        {
            DLog("AmmoPid: " + items[i].AmmoPid);
            found = false;
            for(uint j = 0, k = ammo.length(); j < k; j+=2)
            {
                if(ammo[j] == items[i].AmmoPid)
                {
                    found = true;
                    break;
                }
            }
            if(!found)
            {
                uint idx = ammo.length();
                ammo.resize(ammo.length()+2);
                ammo[idx] = items[i].AmmoPid;
                ammo[idx+1] = BaseItemValue(items[i].AmmoPid, false);
            }
        }

       }
        DLog("Prepared: " + data.length()/2 + " item prices and " + ammo.length()/2 + " ammo prices.");
        // concatenate arrays
        append_array(data, ammo);*/

    DLog("buymod: " + GetItemBuyModifier(player, cr));
    DLog("sellmod: " + GetItemSellModifier(player, cr));

    DLog("Sending barter prices to client");
    player.RunClientScript("_BarterInit", GetItemBuyModifier(player, cr), GetItemSellModifier(player, cr), 0, "", null /*data*/);
    player.RunClientScript("_BarterTraderLevels", 0, 0, 0, "", GetTraderLevels(cr));
    return true;
}

/*void critter_init(Critter& npc, bool firstTime)
   {
        uint dummy;
        if(MapType(npc.Stat[ST_NPC_ROLE], null, dummy))
        {
                _CritSetMode(npc,MODE_NO_STEAL);
                _CritUnsetMode(npc, MODE_NO_BARTER);
                _CritSetExtMode(npc, MODE_EXT_TRADER);

                npc.SetEvent(CRITTER_EVENT_BARTER, "_OnBarter");

                npc.SetBagRefreshTime(50000);
                int bag_bug = npc.GetBagRefreshTime();

                npc.SkillBase[SK_BARTER] = 50;

                CreateTimeEvent(AFTER(TRADER_UPDATE_TIME), "e_Update", npc.Id, false);
        }
        else
        {
                Log("ERR: Npc is not a trader, please change script.");
                _CritSetMode(npc, MODE_NO_BARTER);
                _CritUnsetExtMode(npc, MODE_EXT_TRADER);
        }
   }
 */


/**
 * Updates trader inventory.
 */
uint e_Update(array<uint>@ values)
{
    // _TIMEBEGIN;
    Critter@ npc = GetCritter(values[0]);
    if(!valid(npc))
        return 0;

    file f;
    f.open("logs/traders.log", "a");
    f.writeString(GetCurrentDateTimeString() + "> Updating trader: " + GetScriptName(npc.GetScriptId()) + "\n");

    array<Item@> npcItems;
    uint npcItemsNumber = npc.GetItems(SLOT_INV, npcItems);

    array<uint> npcItemsPids;
    array<uint> npcItemsPidsAll;
    array<uint> npcItemsCount;

    npcItemsPids.resize(0);
    npcItemsPidsAll.resize(0);
    npcItemsCount.resize(0);
    for(uint i=0; i < npcItemsNumber; ++i)
    {
        npcItemsPidsAll.insertLast(npcItems[i].GetProtoId());
    }
    npcItemsPidsAll.sortAsc();
    
    uint lastPid = 0;
    for(uint i=0, j=npcItemsPidsAll.length(), k=0; i < j; ++i)
    {
        if(lastPid == 0)
        {
            lastPid = npcItemsPidsAll[i];
            npcItemsCount.insertLast(1);
            npcItemsPids.insertLast(lastPid);
        }
        else
        {
            if(lastPid == npcItemsPidsAll[i])
            {
                ++npcItemsCount[k];
            }
            else
            {
                ++k;
                lastPid = npcItemsPidsAll[i];
                npcItemsCount.insertLast(1);
                npcItemsPids.insertLast(lastPid);
            }
        }
    }

    uint remainingCount = 1;
    if(npcItemsPids.length() == npcItemsCount.length())
    {
        for(uint i=0; i < npcItemsPids.length(); ++i)
        {
            remainingCount = (npcItemsCount[i]*2)/10;
            remainingCount = CLAMP(remainingCount, 1, npcItemsCount[i]);

            if((npcItemsCount[i] > remainingCount) && !(IsStackItemFromEvent(npcItemsPids[i])))
            {
                npc.DeleteItem(npcItemsPids[i], (npcItemsCount[i]-remainingCount));
            }
        }
    }

    array<Item@> items;
    uint         totalValue = 0;
    // removing old items (new way)
    uint         num = npc.GetItems(SLOT_INV, items);
    #ifdef __DEBUG__
    uint         v = 0;
    for(uint i = 0; i < num; i++)
        v += BaseItemValue(items[i]);
    npc.Say(SAY_NORM, "pre: " + v);
    #endif

    array<int> tvalues;
    tvalues.resize(ITEMTYPE_MAX * 3);
    for(uint i = 0, j = tvalues.length(); i < j; i++)
        tvalues[i] = TraderCapacity(npc, i / 3, i % 3 + 1);

    array<uint> deleted;
    array<uint> deleted_counts;
    for(uint i = 0; i < num; i++)
    {
        if(items[i].GetProtoId() == PID_BOTTLE_CAPS)
            continue;

        // average one day per trader's level for that item
        int time = GetTraderLevel(npc, TradingItemType(items[i])) * REAL_DAY(1);
        #ifdef __DEBUG__
        time = GetTraderLevel(npc, TradingItemType(items[i])) * REAL_MINUTE(1);
        #endif
        if(Random(0, time / AVG_UPDATE_TIME) == 0)
        {
            deleted.insertLast(items[i].GetProtoId());
            deleted_counts.insertLast(MAX(1, items[i].GetCount()));
			if(!(FLAG(items[i].Flags, ITEM_ALWAYS_VIEW)))
				DeleteItem(items[i]);
        }
        else
        {
            int val = BaseItemValue(items[i]);
            tvalues[TradingItemType(items[i]) * 3 + ItemLevel(items[i]) - 1] -= val;
        }
    }
    for(uint i = 0, j = tvalues.length(); i < j; i++)
        if(tvalues[i] < 0)
            tvalues[i] = 0;

    for(uint i = 0, j = deleted.length(); i < j; i++)
    {
        if(i > 0)
            f.writeString(",");
        f.writeString("" + deleted[i] + ":" + deleted_counts[i]);
    }
    f.writeString("\n");
    for(uint i = 0, j = tvalues.length(); i < j; i++)
    {
        if(i > 0)
            f.writeString(",");
        f.writeString("" + tvalues[i]);
    }
    f.writeString("\n");
    // fill in some useful items
    array<Item@> added;
    AddItems(npc, tvalues, added);
    for(uint i = 0, j = added.length(); i < j; i++)
    {
        if(i > 0)
            f.writeString(",");
        f.writeString("" + added[i].GetProtoId() + ":" + MAX(1, added[i].GetCount()));
    }
    f.writeString("\n");
    f.close();

    #ifdef __DEBUG__
    num = npc.GetItems(SLOT_INV, items);
    v = 0;
    for(uint i = 0; i < num; i++)
        if(!items[i].IsNotValid)
            v += BaseItemValue(items[i]);
    npc.Say(SAY_NORM, "post: " + v);
    #endif
    // _TIMEEND;
    return TRADER_UPDATE_TIME;
}

// helper
/*void Update(Critter& npc, uint type, uint level)
   {
        //npc.Say(SAY_NORM, "Checking items " + type + "/" + level);
        // get all items in trader inventory
    array<Item@> allItems;
    uint num = npc.GetItems(SLOT_INV, allItems);
        if(num == 0) return;

        // take only items we're interested in, sort them while building array (from cheapest to expensive)

        // this will be total value of those items
        uint totalValue = 0;
        uint itemsSize=0;
        for(uint i = 0; i < num; i++) // first pass - only count items
        {
                if(allItems[i].GetProtoId() == PID_BOTTLE_CAPS)
                        continue;

                if(TradingItemType(allItems[i]) == type && ItemLevel(allItems[i]) == level)
                {
                        totalValue += BaseItemValue(allItems[i]);
                        itemsSize++;
                }
        }

        array<Item@> items(itemsSize); // no reallocations needed

        for(uint i = 0; i < num; i++) // second pass - put them in array
        {
                if(allItems[i].GetProtoId() == PID_BOTTLE_CAPS)
                        continue;

                if(TradingItemType(allItems[i]) == type && ItemLevel(allItems[i]) == level)
                        InsertItem(allItems[i], items);
        }

        if(totalValue == 0)
                return;
        num = items.length();
        // now check if total value exceeds trader capacity
        int diff = totalValue - TraderCapacity(npc, type, level);
        //npc.Say(SAY_NORM, "Type/level diff: " + diff);
        // remove items if level is exceeding capacity, starting from cheapest ones
        uint i = 0;
        while(diff > 0)
        {
                //npc.Say(SAY_NORM, "Removing exceeding item with price: " + BaseItemValue(items[i]));
                diff -= BaseItemValue(items[i]);
                npc.AddItem(PID_BOTTLE_CAPS, BaseItemValue(items[i]));
                DeleteItem(items[i++]);
        }
   }

   // another helper, sorts items price-wise as they're inserted
   void InsertItem(Item@ item, array<Item@>& items)
   {
        item.Val0=BaseSingleItemValue(item);
        for(uint i = items.length()-1; i > 0; i--)
        {
                if(item.Val0 >= items[i-1].Val0)
                {
                        @items[i] = item;
                        return;
                }
                else
                        @items[i] = @items[i-1];
        }
        @items[0] = item;
   }*/

import void SetTraderLevels(Critter@ npc, array<uint>& levels) from "economy";

void _DenFlick(Critter& npc, bool firstTime)   // junkie house, general and weapons
{
    //                               1  2  3  4  5  6  A  D  A  G  M  C
    /* DenFlick */ uint[] levels =
    {
        1, 1, 0, 1, 1, 0, 0, 0, 0
    };
    SetTraderLevels(npc, levels);
    npc.SkillBase[SK_BARTER] = 65;
    DefaultTraderInit(npc, firstTime);
}

void _DenFrank(Critter& npc, bool firstTime)   // the hole man? drugs, general
{
    /* DenFrank */ uint[] levels =
    {
        0, 0, 0, 0, 0, 1, 1, 0, 0
    };
    SetTraderLevels(npc, levels);
    npc.SkillBase[SK_BARTER] = 50;
    DefaultTraderInit(npc, firstTime);
}

void _DenMom(Critter& npc, bool firstTime)   // Mom's, general
{
    /* DenMom */ uint[] levels = { 0, 0, 0, 0, 0, 1, 1, 0, 0 };
    SetTraderLevels(npc, levels);
    npc.SkillBase[SK_BARTER] = 60;
    DefaultTraderInit(npc, firstTime);
}

void _DenRebecca(Critter& npc, bool firstTime)   // gambling house, general
{

    /* DenRebecca */ uint[] levels =
    {
        1, 0, 0, 0, 1, 0, 1, 0, 0
    };
    SetTraderLevels(npc, levels);
    npc.SkillBase[SK_BARTER] = 50;
    DefaultTraderInit(npc, firstTime);
}

void _DenTubby(Critter& npc, bool firstTime)   // near entrance, general and weapons
{
    //                               1  2  3  4  5  6  A  D  A  G  M  C
    /* DenTubby */ uint[] levels =
    {
        2, 2, 1, 0, 0, 0, 0, 0, 0
    };
    SetTraderLevels(npc, levels);
    npc.SkillBase[SK_BARTER] = 80;
    DefaultTraderInit(npc, firstTime);
}

void _KlamathBuckner(Critter& npc, bool firstTime)   // Buckner's house, general
{
    //                                     1  2  3  4  5  6  A  D  A  G  M  C
    /* KlamathBuckner */ uint[] levels =
    {
        1, 0, 0, 0, 0, 0, 2, 0, 0
    };
    SetTraderLevels(npc, levels);
    npc.SkillBase[SK_BARTER] = 40;
    DefaultTraderInit(npc, firstTime);
}

void _ModocGrishem(Critter& npc, bool firstTime)   // near entrance, general
{
    //                                   1  2  3  4  5  6  A  D  A  G  M  C
    /* ModocGrishem */ uint[] levels =
    {
        1, 0, 0, 0, 1, 0, 1, 0, 0
    };
    SetTraderLevels(npc, levels);
    npc.SkillBase[SK_BARTER] = 60;
    DefaultTraderInit(npc, firstTime);
}

void _ModocJo(Critter& npc, bool firstTime)   // JO! general, maybe weapons
{
    //                              1  2  3  4  5  6  A  D  A  G  M  C
    /* ModocJo */ uint[] levels =
    {
        2, 0, 1, 0, 0, 0, 1, 0, 0
    };
    SetTraderLevels(npc, levels);
    npc.SkillBase[SK_BARTER] = 100;
    DefaultTraderInit(npc, firstTime);
    _CritSetMode(npc, MODE_DLG_SCRIPT_BARTER);
}

void _ModocBalthas(Critter& npc, bool firstTime)   // near well, armour
{
    //                                   1  2  3  4  5  6  A  D  A  G  M  C
    /* ModocBalthas */ uint[] levels =
    {
        0, 0, 0, 1, 0, 0, 0, 0, 0
    };
    SetTraderLevels(npc, levels);
    npc.SkillBase[SK_BARTER] = 70;
    DefaultTraderInit(npc, firstTime);
}

void _ModocMook(Critter& npc, bool firstTime)   // maintenance center, general?
{

    /* ModocMook */ uint[] levels =
    {
        0, 1, 0, 0, 0, 0, 1, 0, 0
    };
    SetTraderLevels(npc, levels);
    npc.SkillBase[SK_BARTER] = 75;
    DefaultTraderInit(npc, firstTime);
}

void _VCAmenities(Critter& npc, bool firstTime)
{
    /* void_VCAmenities */ uint[] levels =
    {
        0, 0, 0, 0, 2, 2, 0, 0, 0
    };
    SetTraderLevels(npc, levels);
    npc.SkillBase[SK_BARTER] = 100;
    DefaultTraderInit(npc, firstTime);
}

void _VCSubAmenitiesA(Critter& npc, bool firstTime)
{
    /* void_VCSubAmenitiesA */ uint[] levels =
    {
        3, 0, 0, 0, 0, 0, 0, 0, 0
    };
    SetTraderLevels(npc, levels);
    npc.SkillBase[SK_BARTER] = 120;
    DefaultTraderInit(npc, firstTime);
}

void _VCSubAmenitiesB(Critter& npc, bool firstTime)
{
    //                                           1  2  3  4  5  6  A  D  A  G  M  C
    /* void_VCSubAmenitiesB */ uint[] levels =
    {
        0, 0, 0, 2, 0, 0, 0, 0, 0
    };
    SetTraderLevels(npc, levels);
    npc.SkillBase[SK_BARTER] = 140;
    DefaultTraderInit(npc, firstTime);
}

void _VCHappyHarry(Critter& npc, bool firstTime)   // near main gate, general, weapons, ammo, armour
{
    //                                   1  2  3  4  5  6  A  D  A  G  M  C
    /* VCHappyHarry */ uint[] levels =
    {
        1, 1, 1, 0, 0, 0, 2, 0, 0
    };
    SetTraderLevels(npc, levels);
    npc.SkillBase[SK_BARTER] = 90;
    DefaultTraderInit(npc, firstTime);
}

void _VCMacRae(Critter& npc, bool firstTime)   // cassidy, general
{
    //                               1  2  3  4  5  6  A  D  A  G  M  C
    /* VCMacRae */ uint[] levels =
    {
        2, 0, 0, 0, 1, 0, 1, 0, 0
    };
    SetTraderLevels(npc, levels);
    npc.SkillBase[SK_BARTER] = 70;
    DefaultTraderInit(npc, firstTime);
}

void _VCDoctorAndrew(Critter& npc, bool firstTime)   // courtyard, drugs
{
    //                                     1  2  3  4  5  6  A  D  A  G  M  C
    /* VCDoctorAndrew */ uint[] levels =
    {
        0, 0, 0, 0, 0, 2, 0, 0, 0
    };
    SetTraderLevels(npc, levels);
    npc.SkillBase[SK_BARTER] = 70;
    DefaultTraderInit(npc, firstTime);
}

void _GeckoSkeeter(Critter& npc, bool firstTime)   // old reactor, general, weapons, ammo, armours, stuff
{
    //                                   1  2  3  4  5  6  A  D  A  G  M  C
    /* GeckoSkeeter */ uint[] levels =
    {
        1, 0, 2, 0, 1, 0, 0, 0, 0
    };
    SetTraderLevels(npc, levels);
    npc.SkillBase[SK_BARTER] = 70;
    DefaultTraderInit(npc, firstTime);
}

void _GeckoPercy(Critter& npc, bool firstTime)   // old reactor, general
{

    /* GeckoPercy */ uint[] levels =
    {
        0, 0, 0, 0, 1, 0, 2, 0, 0
    };
    SetTraderLevels(npc, levels);
    npc.SkillBase[SK_BARTER] = 50;
    DefaultTraderInit(npc, firstTime);
}

void _GeckoWooz(Critter& npc, bool firstTime)   // The Harp, bartender
{
    //                             1  2  3  4  5  6  A  D  A  G  M  C
    /* GeckoWooz */ uint[] levels =
    {
        0, 0, 0, 0, 0, 1, 1, 0, 0
    };
    SetTraderLevels(npc, levels);
    npc.SkillBase[SK_BARTER] = 80;
    DefaultTraderInit(npc, firstTime);
}

void _ReddingAscorti(Critter& npc, bool firstTime)   // gambling house, general
{
    //                                     1  2  3  4  5  6  A  D  A  G  M  C
    /* ReddingAscorti */ uint[] levels =
    {
        2, 0, 1, 0, 0, 0, 2, 0, 0
    };
    SetTraderLevels(npc, levels);
    npc.SkillBase[SK_BARTER] = 105;
    DefaultTraderInit(npc, firstTime);
}

void _ReddingDocJohnson(Critter& npc, bool firstTime)   // painless at redding AND the doc in NCR! drugs
{
    //                                        1  2  3  4  5  6  A  D  A  G  M  C
    /* ReddingDocJohnson */ uint[] levels =
    {
        0, 0, 0, 0, 2, 2, 0, 0, 0
    };
    SetTraderLevels(npc, levels);
    npc.SkillBase[SK_BARTER] = 70;
    DefaultTraderInit(npc, firstTime);
}

void _BrokenDocHolliday(Critter& npc, bool firstTime)   // uh, doc. drugs.
{
    //                                        1  2  3  4  5  6  A  D  A  G  M  C
    /* BrokenDocHolliday */ uint[] levels =
    {
        0, 0, 0, 0, 2, 2, 0, 0, 0
    };
    SetTraderLevels(npc, levels);
    npc.SkillBase[SK_BARTER] = 70;
    DefaultTraderInit(npc, firstTime);
}

void _BrokenLiz(Critter& npc, bool firstTime)   // northern trader, general, armour, weapon
{

    /* BrokenLiz */ uint[] levels =
    {
        2, 1, 0, 2, 0, 0, 1, 0, 0
    };
    SetTraderLevels(npc, levels);
    npc.SkillBase[SK_BARTER] = 70;
    DefaultTraderInit(npc, firstTime);
}

void _BrokenPhil(Critter& npc, bool firstTime)   // ghoul bartender, general, drugs
{

    /* BrokenPhil */ uint[] levels =
    {
        0, 0, 0, 0, 1, 1, 1, 0, 0
    };
    SetTraderLevels(npc, levels);
    npc.SkillBase[SK_BARTER] = 50;
    DefaultTraderInit(npc, firstTime);
}

void _BrokenBill(Critter& npc, bool firstTime)   // central trader, general, armour, weapon
{

    /* BrokenBill */ uint[] levels =
    {
        2, 1, 2, 0, 0, 0, 0, 0, 0
    };
    SetTraderLevels(npc, levels);
    npc.SkillBase[SK_BARTER] = 110;
    DefaultTraderInit(npc, firstTime);
}

void _BrokenJacob(Critter& npc, bool firstTime)   // southern trader, general, drugs
{
    //                                  1  2  3  4  5  6  A  D  A  G  M  C
    /* BrokenJacob */ uint[] levels =
    {
        0, 0, 0, 0, 1, 1, 1, 0, 0
    };
    SetTraderLevels(npc, levels);
    npc.SkillBase[SK_BARTER] = 80;
    DefaultTraderInit(npc, firstTime);
}

void _RenoJules(Critter& npc, bool firstTime)   // entrance guy, drugs
{

    /* RenoJules */ uint[] levels =
    {
        0, 0, 0, 0, 1, 2, 0, 0, 0
    };
    SetTraderLevels(npc, levels);
    npc.SkillBase[SK_BARTER] = 65;
    DefaultTraderInit(npc, firstTime);
}

void _RenoEldridge(Critter& npc, bool firstTime)   // Eldridge! weapons, ammo
{
    //                                   1  2  3  4  5  6  A  D  A  G  M  C
    /* RenoEldridge */ uint[] levels =
    {
        3, 2, 0, 0, 0, 0, 0, 0, 0
    };
    SetTraderLevels(npc, levels);
    npc.SkillBase[SK_BARTER] = 130;
    DefaultTraderInit(npc, firstTime);
}

void _RenoRenesco(Critter& npc, bool firstTime)   // drugs, general
{
    //                                  1  2  3  4  5  6  A  D  A  G  M  C
    /* RenoRenesco */ uint[] levels =
    {
        0, 0, 0, 0, 2, 2, 2, 0, 0
    };
    SetTraderLevels(npc, levels);
    npc.SkillBase[SK_BARTER] = 110;
    DefaultTraderInit(npc, firstTime);
}

void _RenoBartender(Critter& npc, bool firstTime)   // several bartenders, general
{
    //                                    1  2  3  4  5  6  A  D  A  G  M  C
    /* RenoBartender */ uint[] levels =
    {
        0, 0, 0, 0, 1, 1, 0, 0, 0
    };
    SetTraderLevels(npc, levels);
    npc.SkillBase[SK_BARTER] = 50;
    DefaultTraderInit(npc, firstTime);
}

void _NCRBuster(Critter& npc, bool firstTime)   // bazaar, weapons, armours, ammo
{

    /* NCRBuster */ uint[] levels =
    {
        2, 2, 1, 0, 0, 0, 0, 0, 0
    };
    SetTraderLevels(npc, levels);
    npc.SkillBase[SK_BARTER] = 125;
    DefaultTraderInit(npc, firstTime);
}

void _NCRDusty(Critter& npc, bool firstTime)   // cantina, bartender, general
{
    //                               1  2  3  4  5  6  A  D  A  G  M  C
    /* NCRDusty */ uint[] levels =
    {
        1, 0, 0, 0, 1, 1, 1, 0, 0
    };
    SetTraderLevels(npc, levels);
    npc.SkillBase[SK_BARTER] = 65;
    DefaultTraderInit(npc, firstTime);
}

void _NCRMiria(Critter& npc, bool firstTime)   // bazaar pub bartender, general
{
    //                               1  2  3  4  5  6  A  D  A  G  M  C
    /* NCRMiria */ uint[] levels =
    {
        1, 0, 0, 0, 1, 1, 1, 0, 0
    };
    SetTraderLevels(npc, levels);
    npc.SkillBase[SK_BARTER] = 65;
    DefaultTraderInit(npc, firstTime);
}

void _NCRShaNine(Critter& npc, bool firstTime)   // bazaar trader, general
{

    /* NCRShaNine */ uint[] levels =
    {
        1, 0, 0, 2, 0, 0, 2, 0, 0
    };
    SetTraderLevels(npc, levels);
    npc.SkillBase[SK_BARTER] = 90;
    DefaultTraderInit(npc, firstTime);
}


void _SFChiang(Critter& npc, bool firstTime)   // two main traders. weapons, armour, drugs, ammo
{
    //                               1  2  3  4  5  6  A  D  A  G  M  C
    /* SFChiang */ uint[] levels =
    {
        3, 0, 2, 0, 0, 0, 0, 0, 0
    };
    SetTraderLevels(npc, levels);
    npc.SkillBase[SK_BARTER] = 160;
    DefaultTraderInit(npc, firstTime);
}

void _SFDrFung(Critter& npc, bool firstTime)   // dr. drugs
{
    //                               1  2  3  4  5  6  A  D  A  G  M  C
    /* SFDrFung */ uint[] levels =
    {
        0, 0, 0, 0, 2, 2, 0, 0, 0
    };
    SetTraderLevels(npc, levels);
    npc.SkillBase[SK_BARTER] = 100;
    DefaultTraderInit(npc, firstTime);
}

void _SFJenny(Critter& npc, bool firstTime)   // tanker trader. guns, general, ammo?
{
    //                              1  2  3  4  5  6  A  D  A  G  M  C
    /* SFJenny */ uint[] levels =
    {
        1, 0, 0, 0, 1, 1, 2, 0, 0
    };
    SetTraderLevels(npc, levels);
    npc.SkillBase[SK_BARTER] = 125;
    DefaultTraderInit(npc, firstTime);
}

void _SFKarl(Critter& npc, bool firstTime)   // tanker trader, definitely guns, ammo, armour?
{
    //                             1  2  3  4  5  6  A  D  A  G  M  C
    /* SFKarl */ uint[] levels =
    {
        0, 2, 0, 2, 0, 0, 0, 0, 0
    };
    SetTraderLevels(npc, levels);
    npc.SkillBase[SK_BARTER] = 140;
    DefaultTraderInit(npc, firstTime);
}

void _SFSlim(Critter& npc, bool firstTime)   // tanker, bar, bartender. general.
{
    //                             1  2  3  4  5  6  A  D  A  G  M  C
    /* SFSlim */ uint[] levels =
    {
        1, 0, 0, 0, 2, 2, 1, 0, 0
    };
    SetTraderLevels(npc, levels);
    npc.SkillBase[SK_BARTER] = 70;
    DefaultTraderInit(npc, firstTime);
}

void _Killian(Critter& npc, bool firstTime)   // darkwater's in junktown, general, maybe guns, ammo, armour etc.
{
    //                              1  2  3  4  5  6  A  D  A  G  M  C
    /* Killian */ uint[] levels =
    {
        1, 1, 0, 0, 1, 1, 1, 0, 0
    };
    SetTraderLevels(npc, levels);
    npc.SkillBase[SK_BARTER] = 110;
    DefaultTraderInit(npc, firstTime);
}

void _Mitch(Critter& npc, bool firstTime)   // dwarf hub trader, general+stuff
{
    //                            1  2  3  4  5  6  A  D  A  G  M  C
    /* Mitch */ uint[] levels =
    {
        1, 0, 0, 0, 2, 0, 2, 0, 0
    };
    SetTraderLevels(npc, levels);
    npc.SkillBase[SK_BARTER] = 100;
    DefaultTraderInit(npc, firstTime);
}

void _Beth(Critter& npc, bool firstTime)   // lady in hub, general, weapons, ammo
{
    //                           1  2  3  4  5  6  A  D  A  G  M  C
    /* Beth */ uint[] levels =
    {
        0, 0, 1, 0, 1, 1, 1, 0, 0
    };
    SetTraderLevels(npc, levels);
    npc.SkillBase[SK_BARTER] = 120;
    DefaultTraderInit(npc, firstTime);
}

void _Stapleton(Critter& npc, bool firstTime) // Mrs. Stapleton, book seller in Hub
{
    //                           1  2  3  4  5  6  A  D  A  G  M  C
    /* Mrs. Stapleton */ uint[] levels =
    {
        0, 0, 0, 0, 0, 0, 0, 1, 0
    };
    SetTraderLevels(npc, levels);
    npc.SkillBase[SK_BARTER] = 150;
    DefaultTraderInit(npc, firstTime);
}

void _Jacob(Critter& npc, bool firstTime)   // old town hub, weapons, ammo
{
    //                            1  2  3  4  5  6  A  D  A  G  M  C
    /* Jacob */ uint[] levels =
    {
        0, 2, 1, 2, 0, 0, 0, 0, 0
    };
    SetTraderLevels(npc, levels);
    npc.SkillBase[SK_BARTER] = 145;
    DefaultTraderInit(npc, firstTime);
}

void _CathShop(Critter& npc, bool firstTime)   // cathedral, general. maybe guns and armour, drugs?
{
    //                               1  2  3  4  5  6  A  D  A  G  M  C
    /* CathShop */ uint[] levels =
    {
        0, 0, 2, 0, 0, 2, 0, 0, 0
    };
    SetTraderLevels(npc, levels);
    npc.SkillBase[SK_BARTER] = 140;
    DefaultTraderInit(npc, firstTime);
}

void _Gunsmith(Critter& npc, bool firstTime)   // audytum, weapons
{
    //                               1  2  3  4  5  6  A  D  A  G  M  C
    /* Gunsmith */ uint[] levels =
    {
        2, 0, 0, 1, 0, 0, 0, 0, 0
    };
    SetTraderLevels(npc, levels);
    npc.SkillBase[SK_BARTER] = 130;
    DefaultTraderInit(npc, firstTime);
}

void _Gunrunner(Critter& npc, bool firstTime)   // oh the obviousness
{

    /* Gunrunner */ uint[] levels =
    {
        3, 2, 2, 2, 0, 0, 0, 0, 0
    };
    SetTraderLevels(npc, levels);
    npc.SkillBase[SK_BARTER] = 170;
    DefaultTraderInit(npc, firstTime);
}

void _Taylor(Critter& npc, bool firstTime)   // some audytum underground guy, general?
{
    //                             1  2  3  4  5  6  A  D  A  G  M  C
    /* Taylor */ uint[] levels =
    {
        1, 0, 0, 0, 1, 0, 1, 0, 0
    };
    SetTraderLevels(npc, levels);
    npc.SkillBase[SK_BARTER] = 60;
    DefaultTraderInit(npc, firstTime);
}

void _KhansArt(Critter& npc, bool firstTime)   // caravan guy from raiders base, weapons, armour, ammo
{
    //                               1  2  3  4  5  6  A  D  A  G  M  C
    /* KhansArt */ uint[] levels =
    {
        3, 0, 0, 1, 0, 1, 1, 0, 0
    };
    SetTraderLevels(npc, levels);
    npc.SkillBase[SK_BARTER] = 110;
    DefaultTraderInit(npc, firstTime);
}

void _KhansAugustus(Critter& npc, bool firstTime)   // bartender guy from raiders base, general, drugs
{
    //                                    1  2  3  4  5  6  A  D  A  G  M  C
    /* KhansAugustus */ uint[] levels =
    {
        0, 0, 0, 0, 2, 2, 0, 0, 0
    };
    SetTraderLevels(npc, levels);
    npc.SkillBase[SK_BARTER] = 60;
    DefaultTraderInit(npc, firstTime);
}

void _GasStationGordon(Critter& npc, bool firstTime)   // in the general store
{
    //                                        1  2  3  4  5  6  A  D  A  G  M  C
    /* GasStationGordon */ uint[] levels = { 0,     0,      0,      0,      1,      1,      1, 0, 0 };
    SetTraderLevels(npc, levels);
    npc.SkillBase[SK_BARTER] = 80;
    DefaultTraderInit(npc, firstTime);
}

// Vegas
void _Tibbett(Critter& npc, bool firstTime)
{
    //                            1  2  3  4  5  6  A  D  A  G  M  C
    /* Paul */ uint[] levels =
    {
        1, 1, 1, 2, 0, 0, 0, 0, 0
    };
    SetTraderLevels(npc, levels);
    npc.SkillBase[SK_BARTER] = 100;
    DefaultTraderInit(npc, firstTime);
}

void _VegasTony(Critter& npc, bool firstTime)
{
    //                            1  2  3  4  5  6  A  D  A  G  M  C
    /* Tony */ uint[] levels =
    {
        0, 0, 0, 0, 1, 0, 0, 0, 0
    };
    SetTraderLevels(npc, levels);
    npc.SkillBase[SK_BARTER] = 100;
    DefaultTraderInit(npc, firstTime);
}

void _VegasWoody(Critter& npc, bool firstTime)
{
    //                            1  2  3  4  5  6  A  D  A  G  M  C
    /* Tony */ uint[] levels =
    {
        0, 0, 0, 0, 1, 0, 0, 0, 0
    };
    SetTraderLevels(npc, levels);
    npc.SkillBase[SK_BARTER] = 100;
    DefaultTraderInit(npc, firstTime);
}

void _Kwok(Critter& npc, bool firstTime)
{
    //                            1  2  3  4  5  6  A  D  A  G  M  C
    /* Roger */ uint[] levels =
    {
        2, 1, 0, 0, 0, 1, 1, 0, 0
    };
    SetTraderLevels(npc, levels);
    npc.SkillBase[SK_BARTER] = 100;
    DefaultTraderInit(npc, firstTime);
}

void _Quok(Critter& npc, bool firstTime)
{
    //                            1  2  3  4  5  6  A  D  A  G  M  C
    /* Steven */ uint[] levels =
    {
        0, 2, 2, 0, 0, 0, 0, 0, 0
    };
    SetTraderLevels(npc, levels);
    npc.SkillBase[SK_BARTER] = 100;
    DefaultTraderInit(npc, firstTime);
}

void _JovialJoe(Critter& npc, bool firstTime)
{
    //                            1  2  3  4  5  6  A  D  A  G  M  C
    /* Joe */ uint[] levels =
    {
        0, 0, 0, 0, 1, 1, 0, 0, 0
    };
    SetTraderLevels(npc, levels);
    npc.SkillBase[SK_BARTER] = 100;
    DefaultTraderInit(npc, firstTime);
}

void _Pharmacist(Critter& npc, bool firstTime)
{
    //                            1  2  3  4  5  6  A  D  A  G  M  C
    /* Pharmacist */ uint[] levels =
    {
        0, 0, 0, 0, 1, 1, 0, 0, 0
    };
    SetTraderLevels(npc, levels);
    npc.SkillBase[SK_BARTER] = 100;
    DefaultTraderInit(npc, firstTime);
}

void _LiquidJoe(Critter& npc, bool firstTime)
{
    //                            1  2  3  4  5  6  A  D  A  G  M  C
    /* Joe */ uint[] levels =
    {
        0, 0, 1, 1, 1, 0, 0, 0, 0
    };
    SetTraderLevels(npc, levels);
    npc.SkillBase[SK_BARTER] = 100;
    DefaultTraderInit(npc, firstTime);
}

void _CptFernandez(Critter& npc, bool firstTime)
{
    //                            1  2  3  4  5  6  A  D  A  G  M  C
    /* Fernandez */ uint[] levels =
    {
        1, 1, 0, 0, 1, 0, 0, 0, 0
    };
    SetTraderLevels(npc, levels);
    npc.SkillBase[SK_BARTER] = 100;
    DefaultTraderInit(npc, firstTime);
}

void DefaultTraderInit(Critter& npc, bool firstTime)
{
    _CritSetMode(npc, MODE_NO_STEAL);
    _CritSetMode(npc, MODE_NO_LOOT);
    _CritSetMode(npc, MODE_NO_DROP);
    _CritUnsetMode(npc, MODE_NO_BARTER);
    _CritSetExtMode(npc, MODE_EXT_TRADER);

    npc.SetEvent(CRITTER_EVENT_BARTER, "_OnBarter");

    npc.SetBagRefreshTime(uint(-1));
    int bag_bug = npc.GetBagRefreshTime();
	
	array<uint> eventdata = { npc.Id, 0, 0 };

    // fill it with starting stuff
    if(firstTime)
        {
			AddStarterItems(npc);
		}

    CreateTimeEvent(ELAPSED_TIME + TRADER_UPDATE_TIME, "e_Update", npc.Id, false);
	
	Map@ map = npc.GetMap();
	
	if(firstTime)
		if(!map.GetLocation().IsEncounter())
			CreateTimeEvent(AFTER(REAL_MINUTE(Random(5, 14400))), "e_SpecialItemEvent", eventdata, true);
	// for debug CreateTimeEvent(AFTER(REAL_MINUTE(Random(2, 10))), "e_SpecialItemEvent", eventdata, false);
}

// import int[] knapsack (int[] weights, int W) from "utils";

void AddStarterItems(Critter@ npc) { AddItems(npc, null, null); }
// refills the items from the lists, basing on the values needed (ideally it should use list of demanded items?)
// tvalues - values of the items that got removed, sorted by types/levels
void AddItems(Critter@ npc, array<int>@ tvalues, array<Item@>@ items)
{
    // _TIMEBEGIN;
    array<int> levels = GetTraderLevels(npc);
    int        caps = 0;
    for(int type = 0; type < ITEMTYPE_MAX; type++)
    {
        if(levels[type] == 0 && !valid(tvalues))
            continue;

        for(int level = 1; level <= 3; level++)
        {
            int cap = TraderCapacity(npc, type, level);
            if(valid(tvalues))
            {
                cap = tvalues[type * 3 + level - 1];
                if(levels[type] == 0)
                {
                    caps += cap; // he removed some notlisted items, turn it into caps
                    continue;
                }
            }
            if(cap == 0)
                continue;
            // Log(""+npc.Id+","+type+","+level+" SI start for "+cap);
            int                 tval = 0;
            array<array<uint> > list = lists[type * 3 + level - 1];
            int                 len = list.length();
            if(len == 0)
                continue;
            array<int> vals(len);
            for(int i = 0; i < len; i++)
                vals[i] = MAX(1, BaseItemValue(list[i][0], true) * list[i][1]);

            for(int i = 0, j = list.length(); i < j; i++)
            {
                int maxi = i;
                for(int k = i; k < j; k++)
                    if(vals[maxi] > vals[k])
                        maxi = k;
                if(maxi != i)
                {
                    array<uint> temp = list[i];
                    list[i] = list[maxi];
                    list[maxi] = temp;
                    int tmp2 = vals[i];
                    vals[i] = vals[maxi];
                    vals[maxi] = tmp2;
                }
            }


            // for (int i=0; i < len; i++) Log(""+npc.Id+","+type+","+level+" ["+i+"] "+list[i]+","+vals[i]);

            int last = -1;
            while(last < (len - 1) && (vals[last + 1] < cap))
                last++;
            int rnd = 0;
            while(last >= 0)
            {
                rnd = Random(0, last);
                Item@ it = npc.AddItem(list[rnd][0], list[rnd][1]);
                if(valid(items))
                    items.insertLast(it);
                cap -= vals[rnd];
                tval += vals[rnd];
                while(last >= 0 && vals[last] > cap)
                    last--;
            }

            // Log(""+npc.Id+","+type+","+level+" SI end with "+tval);
        }
    }
    if(caps > 0)     // these caps come from not-listed items
    {
        Item@ it = npc.AddItem(PID_BOTTLE_CAPS, caps);
        items.insertLast(it);
    }

	/*
    caps = npc.CountItem(PID_BOTTLE_CAPS);
    if(caps < int(TraderMoneyCapacity(npc)))
    {
        Item@ it = npc.AddItem(PID_BOTTLE_CAPS, TraderMoneyCapacity(npc) - caps);
        if(valid(items))
            items.insertLast(it);
    }
	*/

	caps = npc.CountItem(PID_BOTTLE_CAPS);
	if(caps < 7000 && !IsGuarded(npc.GetMap()))
	{
	  Item@ it = npc.AddItem(PID_BOTTLE_CAPS, Random(1000,2000));
      if (valid(items) && valid(it)) items.insertLast(it);
	}
	else if(caps < 2000 && IsGuarded(npc.GetMap()))
	{
	  Item@ it = npc.AddItem(PID_BOTTLE_CAPS, Random(500,1000));
      if (valid(items) && valid(it)) items.insertLast(it);
	}
	
	
    // Log(""+npc.Id+" SI end with "+TraderMoneyCapacity(npc)+" caps, barter "+npc.Skill[SK_BARTER]);
    // uint __endZZZ=GetTick(); Log("I am being executed for a very long time! ("+(__endZZZ-__nowZZZ)+" ms)");
}

uint e_SpecialItemEvent(array<uint>@ values)
{
	if(values.length() == 1)
	{
		values.resize(3);
		values[1] = 0;
		values[2] = 0;
	}
	
	bool GMCreated = (values[1] == 0 ? false : true);
	uint location = 0, type = EVENT_TYPE_TRADER_UNKNOWN, baseprice, item, podniesienieceny, timeleft = REAL_MINUTE(Random(10, 30));
	uint8 itemkind = Random(1, 20), ilosc = 1, stackable = 0; // stackable = false
	string itemname = "something special", locationname, npctrader = "Someone", bonustype = " ";
	Critter@ trader = GetCritter(values[0]);
	if(!valid(trader))
        return 0;
	
	if(!GMCreated) 
	{
	switch(itemkind)
	{
		case 1:
			switch(Random(1,8))
			{
				case 1: item = PID_POWERED_ARMOR; itemname = "Power Armor"; break;
				case 2: item = PID_HARDENED_POWER_ARMOR; itemname = "Hardened Power Armor"; break;
				case 3: item = PID_ADVANCED_POWER_ARMOR; itemname = "Advanced Power Armor"; break;
				case 4: item = PID_ADVANCED_POWER_ARMOR_MK2; itemname = "Advanced Power Armor MK2"; break;
				case 5: item = PID_APA_HELMET; itemname = "Advanced Power Helmet"; break;
				case 6: item = PID_APA_HELMET_MK2; itemname = "Advanced Power Helmet MK2"; break;
				case 7: item = PID_HARDENED_POWER_HELMET; itemname = "Hardened Power Helmet"; break;
				case 8: item = PID_POWER_HELMET; itemname = "Power Helmet"; break;
			}
			break;
		case 2:
		case 3:
			switch(Random(1,10))
			{
				case 1: item = PID_BROTHERHOOD_COMBAT_ARMOR; itemname = "Brotherhood Combat Armor"; break;
				case 2: item = PID_NCR_ARMOR; itemname = "NCR Ranger Combat Armor"; break;
				case 3: item = PID_ENCLAVE_COMBAT_ARMOR; itemname = "Enclave Combat Armor"; break;
				case 4: item = PID_BROTHERHOOD_HELMET; itemname = "Brotherhood Combat Helmet"; break;
				case 5: item = PID_ENCLAVE_COMBAT_HELMET; itemname = "Enclave Combat Helmet"; break;
				case 6: item = PID_ENCLAVE_COMBAT_HELMET_MK2; itemname = "Enclave Combat Helmet MK2"; break;
				case 7: item = PID_DESERT_COMBAT_HELMET; itemname = "Desert Combat Helmet"; break;
				case 8: item = PID_NCR_HELMET; itemname = "NCR Ranger Combat Helmet"; break;
				case 9: item = PID_CLOTHES_POLICE; itemname = "Police Uniform"; break;
				case 10: item = PID_DESERT_COMBAT_ARMOR; itemname = "Desert Combat Armor"; break;
			}
			break;
		case 4:
			switch(Random(1,15))
			{
				case 1: item = PID_PK12_GAUSS_PISTOL; itemname = "PPK12 Gauss Pistol"; break;
				case 2: item = PID_SNIPER_RIFLE; itemname = "Sniper Rifle"; break;
				case 3: item = PID_INDEPENDENT; itemname = "XL70E3"; break;
				case 4: item = PID_M72_GAUSS_RIFLE; itemname = "M72 Gauss Rifle"; break;
				case 5: item = PID_HK_G11; itemname = "H&K G11"; break;
				case 6: item = PID_HK_G11E; itemname = "H&K G11E"; break;
				case 7: item = PID_BOZAR; itemname = "Bozar"; break;
				case 8: item = PID_ALIEN_LASER_PISTOL; itemname = "Alien Blaster"; break;
				case 9: item = PID_TURBO_PLASMA_RIFLE; itemname = "Turbo Plasma Rifle"; break;
				case 10: item = PID_YK32_PULSE_PISTOL; itemname = "YK32 Pulse Pistol"; break;
				case 11: item = PID_YK42B_PULSE_RIFLE; itemname = "YK42B Pulse Rifle"; break;
				case 12: item = PID_GATLING_LASER; itemname = "Gatling Laser"; break;
				case 13: item = PID_M203; itemname = "M202A1 FLASH"; break;
				case 14: item = PID_SOLAR_SCORCHER; itemname = "Solar Scorcher"; break;
				case 15: item = PID_SAIGA12; itemname = "Saiga-12 shotgun"; break;
			}
			break;
		case 5:
		case 6:
			switch(Random(1,13))
			{
				case 1: item = PID_223_PISTOL; itemname = ".223 Pistol"; break;
				case 2: item = PID_PANCOR_JACKHAMMER; itemname = "Pancor Jackhammer"; break;
				case 3: item = PID_HK_CAWS; itemname = "H&K CAWS"; break;
				case 4: item = PID_HK_P90C; itemname = "HK P90c"; break;
				case 5: item = PID_AVENGER_MINIGUN; itemname = "Avenger Minigun"; break;
				case 6: item = PID_LIGHT_SUPPORT_WEAPON; itemname = "Light Support Weapon"; break;
				case 7: item = PID_LASER_RIFLE; itemname = "Laser Rifle"; break;
				case 8: item = PID_LASER_RIFLE_EXT_CAP; itemname = "Laser Rifle (Ext. Cap.)"; break;
				case 9: item = PID_PLASMA_RIFLE; itemname = "Plasma Rifle"; break;
				case 10: item = PID_4_7MM_CASELESS; itemname = "4.7mm Caseless"; break;
				case 11: item = PID_2MM_EC_AMMO; itemname = "2mm EC ammunition"; break;
				case 12: item = PID_SHOTGUN_DRAGON_BREATH_SHELLS; itemname = "12 ga. Gecko's Breath Shotgun Shells"; break;
				case 13: item = PID_HYPO; itemname = "Hypo"; break;
			}
			break;
		case 7:
			switch(Random(1,40))
			{
				case 1: item = PID_BLUEPRINT_INDEPENDENT; itemname = "plans for XL70E3 Rifle"; break;
				case 2: item = PID_BLUEPRINT_BOZAR; itemname = "plans for Bozar"; break;
				case 3: item = PID_BLUEPRINT_M203; itemname = "plans for M202A1 FLASH Rocket Launcher"; break;
				case 4: item = PID_BLUEPRINT_VINDICATOR_MINIGUN; itemname = "plans for Vindicator Minigun"; break;
				case 5: item = PID_BLUEPRINT_TURBO_PLASMA_RIFLE; itemname = "plans for Turbo Plasma Rifle"; break;
				case 6: item = PID_BLUEPRINT_YK42B_PULSE_RIFLE; itemname = "plans for YK42B Pulse Rifle"; break;
				case 7: item = PID_BLUEPRINT_HK_G11; itemname = "plans for H&K G11 submachine gun"; break;
				case 8: item = PID_BLUEPRINT_HK_G11E; itemname = "plans for H&K G11E submachine gun"; break;
				case 9: item = PID_BLUEPRINT_YK32_PULSE_PISTOL; itemname = "plans for YK32 Pulse Pistol"; break;
				case 10: item = PID_BLUEPRINT_FN_FAL_NIGHT_SCOPE; itemname = "plans for FN FAL Night Scope"; break;
				case 11: item = PID_BLUEPRINT_PK12_GAUSS_PISTOL; itemname = "plans for PK12 Gauss Pistol"; break;
				case 12: item = PID_BLUEPRINT_M72_GAUSS_RIFLE; itemname = "plans for M72 Gauss Rifle"; break;
				case 13: item = PID_BLUEPRINT_SOLAR_SCORCHER; itemname = "plans for Solar Scorcher"; break;
				case 14: item = PID_BLUEPRINT_METAL_ARMOR_MK_III; itemname = "plans for Metal Armor Mark 3"; break;
				case 15: item = PID_BLUEPRINT_COMBAT_HELMET_MK_II; itemname = "plans for a Combat Helmet Mark II"; break;
				case 16: item = PID_BLUEPRINT_BROTHERHOOD_HELMET; itemname = "plans for a Brotherhood Combat Helmet"; break;
				case 17: item = PID_BLUEPRINT_ENCLAVE_COMBAT_HELMET; itemname = "plans for an Enclave Combat Helmet"; break;
				case 18: item = PID_BLUEPRINT_ENCLAVE_COMBAT_HELMET_MK_II; itemname = "plans for an Enclave Combat Helmet Mark II"; break;
				case 19: item = PID_BLUEPRINT_DESERT_COMBAT_HELMET; itemname = "plans for a Desert Combat Helmet"; break;
				case 20: item = PID_BLUEPRINT_NCR_HELMET; itemname = "plans for a NCR Combat Helmet"; break;
				case 21: item = PID_BLUEPRINT_POWER_HELMET; itemname = "plans for a Power Helmet"; break;
				case 22: item = PID_BLUEPRINT_HARDENED_POWER_HELMET; itemname = "plans for a Hardened Power Helmet"; break;
				case 23: item = PID_BLUEPRINT_ADVANCED_POWER_HELMET; itemname = "plans for a Advanced Power Helmet"; break;
				case 24: item = PID_BLUEPRINT_ADVANCED_POWER_HELMET_MK2; itemname = "plans for a Advanced Power Helmet Mark II"; break;
				case 25: item = PID_BLUEPRINT_COMBAT_ARMOR_MK_II; itemname = "plans for a Combat Armor Mark II"; break;
				case 26: item = PID_BLUEPRINT_BROTHERHOOD_COMBAT_ARMOR; itemname = "plans for a Brotherhood Combat Armor"; break;
				case 27: item = PID_BLUEPRINT_ENCLAVE_COMBAT_ARMOR; itemname = "plans for an Enclave Combat Armor"; break;
				case 28: item = PID_BLUEPRINT_DESERT_COMBAT_ARMOR; itemname = "plans for a Desert Combat Armor"; break;
				case 29: item = PID_BLUEPRINT_NCR_ARMOR; itemname = "plans for a NCR Ranger Combat Armor"; break;
				case 30: item = PID_BLUEPRINT_POWERED_ARMOR; itemname = "plans for a Power Armor"; break;
				case 31: item = PID_BLUEPRINT_HARDENED_POWER_ARMOR; itemname = "plans for a Hardened Power Armor"; break;
				case 32: item = PID_BLUEPRINT_ADVANCED_POWER_ARMOR; itemname = "plans for a Advanced Power Armor"; break;
				case 33: item = PID_BLUEPRINT_ADVANCED_POWER_ARMOR_MK2; itemname = "plans for a Advanced Power Armor Mark II"; break;
				case 34: item = PID_BLUEPRINT_PID_HYPO; itemname = "Recipe for the Hypo"; break;
				case 35: item = PID_BLUEPRINT_JET_ANTIDOTE; itemname = "Recipe for the Jet Antidote"; break;
				case 36: item = PID_BLUEPRINT_SHOTGUN_DRAGON_BREATH_SHELLS; itemname = "plans for Gecko's Breath Shotgun Shells"; break;
				case 37: item = PID_BLUEPRINT_4_7MM_CASELESS; itemname = "plans for 4.7mm caseless ammunition"; break;
				case 38: item = PID_BLUEPRINT_2MM_EC_AMMO; itemname = "plans for 2mm EC ammunition"; break;
				case 39: item = PID_BLUEPRINT_GATLING_LASER; itemname = "plans for Gatling Laser"; break;
				case 40: item = PID_BLUEPRINT_SAIGA_12; itemname = "plans for Saiga-12 semi-automatic shotgun"; break;
			}
			break;
		case 8:
			switch(Random(1,10))
			{
				case 1: item = PID_IMPLANT_DERMAL; itemname = "Dermal Module"; break;
				case 2: item = PID_IMPLANT_PHOENIX; itemname = "Phoenix Module"; break;
				case 3: item = PID_IMPLANT_NEMEAN; itemname = "Nemean Module"; break;
				case 4: item = PID_IMPLANT_STRENGTH; itemname = "Hypertrophy Accelerator"; break;
				case 5: item = PID_IMPLANT_PERCEPTION; itemname = "Optics Enhancer"; break;
				case 6: item = PID_IMPLANT_ENDURANCE; itemname = "Nociception Regulator"; break;
				case 7: item = PID_IMPLANT_CHARISMA; itemname = "Empathy Synthesizer"; break;
				case 8: item = PID_IMPLANT_INTELLIGENCE; itemname = "Logic Co-processor"; break;
				case 9: item = PID_IMPLANT_AGILITY; itemname = "Reflex Booster"; break;
				case 10: item = PID_IMPLANT_LUCK; itemname = "Probability Calculator"; break;
			}
			break;
		case 9:
			switch(Random(1,37))
			{
				case 1: item = PID_BLUEPRINT_14MM_PISTOL; itemname = "plans for Sig-Sauer 14mm Auto Pistol"; break;
				case 2: item = PID_BLUEPRINT_NEEDLER_PISTOL; itemname = "plans for HN Needler Pistol"; break;
				case 3: item = PID_BLUEPRINT_223_PISTOL; itemname = "plans for .223 Pistol"; break;
				case 4: item = PID_BLUEPRINT_ASSAULT_RIFLE; itemname = "plans for AK-112 assault rifle"; break;
				case 5: item = PID_BLUEPRINT_FN_FAL; itemname = "plans for FN FAL battle rifle"; break;
				case 6: item = PID_BLUEPRINT_SNIPER_RIFLE; itemname = "plans for DKS-501 Sniper Rifle"; break;
				case 7: item = PID_BLUEPRINT_P90; itemname = "plans for H&K P90c"; break;
				case 8: item = PID_BLUEPRINT_HK_CAWS; itemname = "plans for H&K CAWS automatic shotgun"; break;
				case 9: item = PID_BLUEPRINT_PANCOR_JACKHAMMER; itemname = "plans for Pancor Jackhammer shotgun"; break;
				case 10: item = PID_BLUEPRINT_PLASMA_PISTOL; itemname = "plans for Glock 86 Defender Plasma Pistol"; break;
				case 11: item = PID_BLUEPRINT_LASER_RIFLE; itemname = "plans for Wattz 2000 Laser Rifle"; break;
				case 12: item = PID_BLUEPRINT_PLASMA_RIFLE; itemname = "plans for Winchester P94 Plasma Rifle"; break;
				case 13: item = PID_BLUEPRINT_MEGA_POWER_FIST; itemname = "plans for Big Frigger Mega Power Fist"; break;
				case 14: item = PID_BLUEPRINT_SUPER_CATTLE_PROD; itemname = "plans for Wattz Electronics Super Cattle Prod"; break;
				case 15: item = PID_BLUEPRINT_RIPPER; itemname = "plans for Ripper vibroblade"; break;
				case 16: item = PID_BLUEPRINT_ROCKET_LAUNCHER; itemname = "plans for Rockwell BigBazooka"; break;
				case 17: item = PID_BLUEPRINT_LIGHT_SUPPORT_WEAPON; itemname = "plans for squad-level Light Support Weapon"; break;
				case 18: item = PID_BLUEPRINT_MINIGUN; itemname = "plans for CZ53 Personal Minigun"; break;
				case 19: item = PID_BLUEPRINT_PLASMA_GRENADE; itemname = "plans for Plasma Grenades"; break;
				case 20: item = PID_BLUEPRINT_DYNAMITE; itemname = "plans for Dynamite"; break;
				case 21: item = PID_BLUEPRINT_PLASTIC_EXPLOSIVES; itemname = "plans for Plastic Explosives"; break;
				case 22: item = PID_BLUEPRINT_SUPER_SLEDGE; itemname = "plans for Super Sledge"; break;
				case 23: item = PID_BLUEPRINT_IMPROVED_FLAMETHROWER; itemname = "plans for Incinerator"; break;
				case 24: item = PID_BLUEPRINT_METAL_ARMOR_MK_II; itemname = "plans for Metal Armor Mark II"; break;
				case 25: item = PID_BLUEPRINT_TESLA_ARMOR; itemname = "plans for Tesla Armor"; break;
				case 26: item = PID_BLUEPRINT_COMBAT_ARMOR; itemname = "plans for Combat Armor"; break;
				case 27: item = PID_BLUEPRINT_METAL_HELMET_MK2; itemname = "plans for Metal Mask MkII"; break;
				case 28: item = PID_BLUEPRINT_TESLA_HELMET; itemname = "plans for Tesla Helmet"; break;
				case 29: item = PID_BLUEPRINT_COMBAT_HELMET; itemname = "plans for Combat Helmet"; break;
				case 30: item = PID_BLUEPRINT_SUPER_STIMPAK; itemname = "plans for Super Stimpak"; break;
				case 31: item = PID_BLUEPRINT_STIMPAK; itemname = "plans for Stimpak"; break;
				case 32: item = PID_BLUEPRINT_JET; itemname = "plans for Jet"; break;
				case 33: item = PID_BLUEPRINT_BUFFOUT; itemname = "plans for Buffout"; break;
				case 34: item = PID_BLUEPRINT_MENTATS; itemname = "plans for Mentats"; break;
				case 35: item = PID_BLUEPRINT_PSYCHO; itemname = "plans for Psycho"; break;
				case 36: item = PID_BLUEPRINT_RADAWAY; itemname = "plans for Rad Away"; break;
				case 37: item = PID_BLUEPRINT_RADX; itemname = "plans for Rad-X"; break;
			}
			break;
		default: return REAL_MINUTE(Random(360, 2880));
	}
	}
	else
	{
		item = values[2];
		switch(item)
		{
			case PID_POWERED_ARMOR: itemname = "Power Armor"; break;
			case PID_HARDENED_POWER_ARMOR: itemname = "Hardened Power Armor"; break;
			case PID_ADVANCED_POWER_ARMOR: itemname = "Advanced Power Armor"; break;
			case PID_ADVANCED_POWER_ARMOR_MK2: itemname = "Advanced Power Armor MK2"; break;
			case PID_APA_HELMET: itemname = "Advanced Power Helmet"; break;
			case PID_APA_HELMET_MK2: itemname = "Advanced Power Helmet MK2"; break;
			case PID_HARDENED_POWER_HELMET: itemname = "Hardened Power Helmet"; break;
			case PID_POWER_HELMET: itemname = "Power Helmet"; break;
			case PID_BROTHERHOOD_COMBAT_ARMOR: itemname = "Brotherhood Combat Armor"; break;
			case PID_NCR_ARMOR: itemname = "NCR Ranger Combat Armor"; break;
			case PID_ENCLAVE_COMBAT_ARMOR: itemname = "Enclave Combat Armor"; break;
			case PID_BROTHERHOOD_HELMET: itemname = "Brotherhood Combat Helmet"; break;
			case PID_ENCLAVE_COMBAT_HELMET: itemname = "Enclave Combat Helmet"; break;
			case PID_ENCLAVE_COMBAT_HELMET_MK2: itemname = "Enclave Combat Helmet MK2"; break;
			case PID_DESERT_COMBAT_HELMET: itemname = "Desert Combat Helmet"; break;
			case PID_NCR_HELMET: itemname = "NCR Ranger Combat Helmet"; break;
			case PID_CLOTHES_POLICE: itemname = "Police Uniform"; break;
			case PID_DESERT_COMBAT_ARMOR: itemname = "Desert Combat Armor"; break;
			case PID_PK12_GAUSS_PISTOL: itemname = "PPK12 Gauss Pistol"; break;
			case PID_SNIPER_RIFLE: itemname = "Sniper Rifle"; break;
			case PID_INDEPENDENT: itemname = "XL70E3"; break;
			case PID_M72_GAUSS_RIFLE: itemname = "M72 Gauss Rifle"; break;
			case PID_HK_G11: itemname = "H&K G11"; break;
			case PID_HK_G11E: itemname = "H&K G11E"; break;
			case PID_BOZAR: itemname = "Bozar"; break;
			case PID_ALIEN_LASER_PISTOL: itemname = "Alien Blaster"; break;
			case PID_TURBO_PLASMA_RIFLE: itemname = "Turbo Plasma Rifle"; break;
			case PID_YK32_PULSE_PISTOL: itemname = "YK32 Pulse Pistol"; break;
			case PID_YK42B_PULSE_RIFLE: itemname = "YK42B Pulse Rifle"; break;
			case PID_GATLING_LASER: itemname = "Gatling Laser"; break;
			case PID_M203: itemname = "M202A1 FLASH"; break;
			case PID_SOLAR_SCORCHER: itemname = "Solar Scorcher"; break;
			case PID_SAIGA12: itemname = "Saiga-12 shotgun"; break;
			case PID_223_PISTOL: itemname = ".223 Pistol"; break;
			case PID_PANCOR_JACKHAMMER: itemname = "Pancor Jackhammer"; break;
			case PID_HK_CAWS: itemname = "H&K CAWS"; break;
			case PID_HK_P90C: itemname = "HK P90c"; break;
			case PID_AVENGER_MINIGUN: itemname = "Avenger Minigun"; break;
			case PID_LIGHT_SUPPORT_WEAPON: itemname = "Light Support Weapon"; break;
			case PID_LASER_RIFLE: itemname = "Laser Rifle"; break;
			case PID_LASER_RIFLE_EXT_CAP: itemname = "Laser Rifle (Ext. Cap.)"; break;
			case PID_PLASMA_RIFLE: itemname = "Plasma Rifle"; break;
			case PID_4_7MM_CASELESS: itemname = "4.7mm Caseless"; break;
			case PID_2MM_EC_AMMO: itemname = "2mm EC ammunition"; break;
			case PID_SHOTGUN_DRAGON_BREATH_SHELLS: itemname = "12 ga. Gecko's Breath Shotgun Shells"; break;
			case PID_HYPO: itemname = "Hypo"; break;
			case PID_BLUEPRINT_INDEPENDENT: itemname = "plans for XL70E3 Rifle"; break;
			case PID_BLUEPRINT_BOZAR: itemname = "plans for Bozar"; break;
			case PID_BLUEPRINT_M203: itemname = "plans for M202A1 FLASH Rocket Launcher"; break;
			case PID_BLUEPRINT_VINDICATOR_MINIGUN: itemname = "plans for Vindicator Minigun"; break;
			case PID_BLUEPRINT_TURBO_PLASMA_RIFLE: itemname = "plans for Turbo Plasma Rifle"; break;
			case PID_BLUEPRINT_YK42B_PULSE_RIFLE: itemname = "plans for YK42B Pulse Rifle"; break;
			case PID_BLUEPRINT_HK_G11: itemname = "plans for H&K G11 submachine gun"; break;
			case PID_BLUEPRINT_HK_G11E: itemname = "plans for H&K G11E submachine gun"; break;
			case PID_BLUEPRINT_YK32_PULSE_PISTOL: itemname = "plans for YK32 Pulse Pistol"; break;
			case PID_BLUEPRINT_FN_FAL_NIGHT_SCOPE: itemname = "plans for FN FAL Night Scope"; break;
			case PID_BLUEPRINT_PK12_GAUSS_PISTOL: itemname = "plans for PK12 Gauss Pistol"; break;
			case PID_BLUEPRINT_M72_GAUSS_RIFLE: itemname = "plans for M72 Gauss Rifle"; break;
			case PID_BLUEPRINT_SOLAR_SCORCHER: itemname = "plans for Solar Scorcher"; break;
			case PID_BLUEPRINT_METAL_ARMOR_MK_III: itemname = "plans for Metal Armor Mark 3"; break;
			case PID_BLUEPRINT_COMBAT_HELMET_MK_II: itemname = "plans for a Combat Helmet Mark II"; break;
			case PID_BLUEPRINT_BROTHERHOOD_HELMET: itemname = "plans for a Brotherhood Combat Helmet"; break;
			case PID_BLUEPRINT_ENCLAVE_COMBAT_HELMET: itemname = "plans for an Enclave Combat Helmet"; break;
			case PID_BLUEPRINT_ENCLAVE_COMBAT_HELMET_MK_II: itemname = "plans for an Enclave Combat Helmet Mark II"; break;
			case PID_BLUEPRINT_DESERT_COMBAT_HELMET: itemname = "plans for a Desert Combat Helmet"; break;
			case PID_BLUEPRINT_NCR_HELMET: itemname = "plans for a NCR Combat Helmet"; break;
			case PID_BLUEPRINT_POWER_HELMET: itemname = "plans for a Power Helmet"; break;
			case PID_BLUEPRINT_HARDENED_POWER_HELMET: itemname = "plans for a Hardened Power Helmet"; break;
			case PID_BLUEPRINT_ADVANCED_POWER_HELMET: itemname = "plans for a Advanced Power Helmet"; break;
			case PID_BLUEPRINT_ADVANCED_POWER_HELMET_MK2: itemname = "plans for a Advanced Power Helmet Mark II"; break;
			case PID_BLUEPRINT_COMBAT_ARMOR_MK_II: itemname = "plans for a Combat Armor Mark II"; break;
			case PID_BLUEPRINT_BROTHERHOOD_COMBAT_ARMOR: itemname = "plans for a Brotherhood Combat Armor"; break;
			case PID_BLUEPRINT_ENCLAVE_COMBAT_ARMOR: itemname = "plans for an Enclave Combat Armor"; break;
			case PID_BLUEPRINT_DESERT_COMBAT_ARMOR: itemname = "plans for a Desert Combat Armor"; break;
			case PID_BLUEPRINT_NCR_ARMOR: itemname = "plans for a NCR Ranger Combat Armor"; break;
			case PID_BLUEPRINT_POWERED_ARMOR: itemname = "plans for a Power Armor"; break;
			case PID_BLUEPRINT_HARDENED_POWER_ARMOR: itemname = "plans for a Hardened Power Armor"; break;
			case PID_BLUEPRINT_ADVANCED_POWER_ARMOR: itemname = "plans for a Advanced Power Armor"; break;
			case PID_BLUEPRINT_ADVANCED_POWER_ARMOR_MK2: itemname = "plans for a Advanced Power Armor Mark II"; break;
			case PID_BLUEPRINT_PID_HYPO: itemname = "Recipe for the Hypo"; break;
			case PID_BLUEPRINT_JET_ANTIDOTE: itemname = "Recipe for the Jet Antidote"; break;
			case PID_BLUEPRINT_SHOTGUN_DRAGON_BREATH_SHELLS: itemname = "plans for Gecko's Breath Shotgun Shells"; break;
			case PID_BLUEPRINT_4_7MM_CASELESS: itemname = "plans for 4.7mm caseless ammunition"; break;
			case PID_BLUEPRINT_2MM_EC_AMMO: itemname = "plans for 2mm EC ammunition"; break;
			case PID_BLUEPRINT_GATLING_LASER: itemname = "plans for Gatling Laser"; break;
			case PID_BLUEPRINT_SAIGA_12: itemname = "plans for Saiga-12 semi-automatic shotgun"; break;
			case PID_IMPLANT_DERMAL: itemname = "Dermal Module"; break;
			case PID_IMPLANT_PHOENIX: itemname = "Phoenix Module"; break;
			case PID_IMPLANT_NEMEAN: itemname = "Nemean Module"; break;
			case PID_IMPLANT_STRENGTH: itemname = "Hypertrophy Accelerator"; break;
			case PID_IMPLANT_PERCEPTION: itemname = "Optics Enhancer"; break;
			case PID_IMPLANT_ENDURANCE: itemname = "Nociception Regulator"; break;
			case PID_IMPLANT_CHARISMA: itemname = "Empathy Synthesizer"; break;
			case PID_IMPLANT_INTELLIGENCE: itemname = "Logic Co-processor"; break;
			case PID_IMPLANT_AGILITY: itemname = "Reflex Booster"; break;
			case PID_IMPLANT_LUCK: itemname = "Probability Calculator"; break;
			case PID_BLUEPRINT_14MM_PISTOL: itemname = "plans for Sig-Sauer 14mm Auto Pistol"; break;
			case PID_BLUEPRINT_NEEDLER_PISTOL: itemname = "plans for HN Needler Pistol"; break;
			case PID_BLUEPRINT_223_PISTOL: itemname = "plans for .223 Pistol"; break;
			case PID_BLUEPRINT_ASSAULT_RIFLE: itemname = "plans for AK-112 assault rifle"; break;
			case PID_BLUEPRINT_FN_FAL: itemname = "plans for FN FAL battle rifle"; break;
			case PID_BLUEPRINT_SNIPER_RIFLE: itemname = "plans for DKS-501 Sniper Rifle"; break;
			case PID_BLUEPRINT_P90: itemname = "plans for H&K P90c"; break;
			case PID_BLUEPRINT_HK_CAWS: itemname = "plans for H&K CAWS automatic shotgun"; break;
			case PID_BLUEPRINT_PANCOR_JACKHAMMER: itemname = "plans for Pancor Jackhammer shotgun"; break;
			case PID_BLUEPRINT_PLASMA_PISTOL: itemname = "plans for Glock 86 Defender Plasma Pistol"; break;
			case PID_BLUEPRINT_LASER_RIFLE: itemname = "plans for Wattz 2000 Laser Rifle"; break;
			case PID_BLUEPRINT_PLASMA_RIFLE: itemname = "plans for Winchester P94 Plasma Rifle"; break;
			case PID_BLUEPRINT_MEGA_POWER_FIST: itemname = "plans for Big Frigger Mega Power Fist"; break;
			case PID_BLUEPRINT_SUPER_CATTLE_PROD: itemname = "plans for Wattz Electronics Super Cattle Prod"; break;
			case PID_BLUEPRINT_RIPPER: itemname = "plans for Ripper vibroblade"; break;
			case PID_BLUEPRINT_ROCKET_LAUNCHER: itemname = "plans for Rockwell BigBazooka"; break;
			case PID_BLUEPRINT_LIGHT_SUPPORT_WEAPON: itemname = "plans for squad-level Light Support Weapon"; break;
			case PID_BLUEPRINT_MINIGUN: itemname = "plans for CZ53 Personal Minigun"; break;
			case PID_BLUEPRINT_PLASMA_GRENADE: itemname = "plans for Plasma Grenades"; break;
			case PID_BLUEPRINT_DYNAMITE: itemname = "plans for Dynamite"; break;
			case PID_BLUEPRINT_PLASTIC_EXPLOSIVES: itemname = "plans for Plastic Explosives"; break;
			case PID_BLUEPRINT_SUPER_SLEDGE: itemname = "plans for Super Sledge"; break;
			case PID_BLUEPRINT_IMPROVED_FLAMETHROWER: itemname = "plans for Incinerator"; break;
			case PID_BLUEPRINT_METAL_ARMOR_MK_II: itemname = "plans for Metal Armor Mark II"; break;
			case PID_BLUEPRINT_TESLA_ARMOR: itemname = "plans for Tesla Armor"; break;
			case PID_BLUEPRINT_COMBAT_ARMOR: itemname = "plans for Combat Armor"; break;
			case PID_BLUEPRINT_METAL_HELMET_MK2: itemname = "plans for Metal Mask MkII"; break;
			case PID_BLUEPRINT_TESLA_HELMET: itemname = "plans for Tesla Helmet"; break;
			case PID_BLUEPRINT_COMBAT_HELMET: itemname = "plans for Combat Helmet"; break;
			case PID_BLUEPRINT_SUPER_STIMPAK: itemname = "plans for Super Stimpak"; break;
			case PID_BLUEPRINT_STIMPAK: itemname = "plans for Stimpak"; break;
			case PID_BLUEPRINT_JET: itemname = "plans for Jet"; break;
			case PID_BLUEPRINT_BUFFOUT: itemname = "plans for Buffout"; break;
			case PID_BLUEPRINT_MENTATS: itemname = "plans for Mentats"; break;
			case PID_BLUEPRINT_PSYCHO: itemname = "plans for Psycho"; break;
			case PID_BLUEPRINT_RADAWAY: itemname = "plans for Rad Away"; break;
			case PID_BLUEPRINT_RADX: itemname = "plans for Rad-X"; break;
			default: itemname = "something special";
		}
	}

	Map@ map = trader.GetMap();
	Location@ otherLocation = map.GetLocation();
	location = otherLocation.GetProtoId();
	
	switch(map.GetProtoId())
	{
		case MAP_DenBusiness:
			locationname = "Den" ;
			location = LOCATION_TheDen;
			
			switch(trader.Param[ST_DIALOG_ID])
			{
				case DIALOG_den_flik:  // flick
					npctrader = "Flick" ;
					type = EVENT_TYPE_TRADER_1;
					break;
				case DIALOG_den_mom:
					npctrader = "Mom" ;
					type = EVENT_TYPE_TRADER_2;
					break;
				case DIALOG_den_bekky: // rebecca
					npctrader = "Rebecca" ;
					type = EVENT_TYPE_TRADER_3;
					break;
				case DIALOG_den_tubby:
					npctrader = "Tubby" ;
					type = EVENT_TYPE_TRADER_4;
					break;
				case DIALOG_den_billy: // it's this frank
					npctrader = "Frank" ;
					type = EVENT_TYPE_TRADER_5;
					break;

				default: if(!GMCreated) npctrader = "NOT RECOGNIZED CritterID: " + trader.Id ; type = EVENT_TYPE_TRADER_UNKNOWN; break;
			}
			break;

		case MAP_KlamathDowntown:
			locationname = "Klamath" ;
			location = LOCATION_Klamath;
			
			switch(trader.Param[ST_DIALOG_ID])
			{
				case DIALOG_klam_majda: // Maida Buckner
					npctrader = "Maida Buckner" ;
					type = EVENT_TYPE_TRADER_1;
					break;
				default: if(!GMCreated) npctrader = "NOT RECOGNIZED CritterID: " + trader.Id ; type = EVENT_TYPE_TRADER_UNKNOWN; break;
			}
			break;
			
		case MAP_ModocLarge:
			locationname = "Modoc" ;
			location = LOCATION_Modoc;
			
			switch(trader.Param[ST_DIALOG_ID])
			{
				case DIALOG_mod_grishem: // Grisham
					npctrader = "Grisham" ;
					type = EVENT_TYPE_TRADER_1;
					break;
				case DIALOG_mod_joe: // Jo
					npctrader = "Jo" ;
					type = EVENT_TYPE_TRADER_2;
					break;
				case DIALOG_mod_baltas: // Balthas
				npctrader = "Balthas" ;
					type = EVENT_TYPE_TRADER_3;
					break;
				case DIALOG_mod_hose: // Mook
				npctrader = "Mook" ;
					type = EVENT_TYPE_TRADER_4;
					break;
				default: if(!GMCreated) npctrader = "NOT RECOGNIZED CritterID: " + trader.Id ; type = EVENT_TYPE_TRADER_UNKNOWN; break;
			}
			break;

		case MAP_VaultCityDowntown:
			locationname = "Vault City" ;
			location = LOCATION_VaultCity;
			
			switch(trader.Param[ST_DIALOG_ID])
			{
				case DIALOG_vaul_macrae: // McRae
					npctrader = "McRae" ;
					type = EVENT_TYPE_TRADER_1;
					break;
				case DIALOG_vaul_garry: // Harry
					npctrader = "Harry" ;
					type = EVENT_TYPE_TRADER_2;
					break;
				case DIALOG_vaul_doctor_andru: // Doctor Andrew
					npctrader = "Doctor Andrew" ;
					type = EVENT_TYPE_TRADER_3;
					break;
				case DIALOG_vaul_randal: // Randal
					npctrader = "Randal" ;
					type = EVENT_TYPE_TRADER_4;
					break;
				case DIALOG_vaul_darrow: // Darrow (A)
					npctrader = "Darrow" ;
					type = EVENT_TYPE_TRADER_5;
					break;
				case DIALOG_vaul_hoden: // Holden (B)
					npctrader = "Holden" ;
					type = EVENT_TYPE_TRADER_6;
					break;
				default: if(!GMCreated) npctrader = "NOT RECOGNIZED CritterID: " + trader.Id ; type = EVENT_TYPE_TRADER_UNKNOWN; break;
			}
			break;

		case MAP_GeckoSettlement:
			locationname = "Gecko" ;
			location = LOCATION_Gecko;
			
			switch(trader.Param[ST_DIALOG_ID])
			{
				case DIALOG_geck_wooz: // Wooz
					npctrader = "Wooz" ;
					type = EVENT_TYPE_TRADER_1;
					break;
				case DIALOG_geck_persi: // Percy
					npctrader = "Percy" ;
					type = EVENT_TYPE_TRADER_2;
					break;
				case DIALOG_geck_sceetr: // Skeeter
					npctrader = "Skeeter" ;
					type = EVENT_TYPE_TRADER_3;
					break;
				default: if(!GMCreated) npctrader = "NOT RECOGNIZED CritterID: " + trader.Id ; type = EVENT_TYPE_TRADER_UNKNOWN; break;
			}
			break;

		case MAP_Redding:
			locationname = "Redding" ;
			location = LOCATION_Redding;
			
			switch(trader.Param[ST_DIALOG_ID])
			{
				case DIALOG_redd_askorti: // Ascorti
					npctrader = "Ascorti" ;
					type = EVENT_TYPE_TRADER_1;
					break;
				case DIALOG_redd_doctor: // Doc Johnson
					npctrader = "Doc Johnson" ;
					type = EVENT_TYPE_TRADER_2;
					break;
				default: if(!GMCreated) npctrader = "NOT RECOGNIZED CritterID: " + trader.Id ; type = EVENT_TYPE_TRADER_UNKNOWN; break;
			}
			break;

		case MAP_BrokenHills:
			locationname = "Broken Hills" ;
			location = LOCATION_BrokenHills;
			
			switch(trader.Param[ST_DIALOG_ID])
			{
				case DIALOG_bh_liz: // Liz
					npctrader = "Liz" ;
					type = EVENT_TYPE_TRADER_1;
					break;
				case DIALOG_bh_outfit: // Bill
					npctrader = "Bill" ;
					type = EVENT_TYPE_TRADER_2;
					break;
				case DIALOG_bh_phil: // Phil
					npctrader = "Phil" ;
					type = EVENT_TYPE_TRADER_3;
					break;
				case DIALOG_bh_jacob: // Jacob
					npctrader = "Jacob" ;
					type = EVENT_TYPE_TRADER_4;
					break;
				case DIALOG_bh_doc: // DocHolliday
					npctrader = "Doc Holliday" ;
					type = EVENT_TYPE_TRADER_5;
					break;
					
				default: if(!GMCreated) npctrader = "NOT RECOGNIZED CritterID: " + trader.Id ; type = EVENT_TYPE_TRADER_UNKNOWN; break;
			}
			break;

		case MAP_NewReno1:
		case MAP_NewReno2:
		case MAP_NewReno3:
		case MAP_NewReno_SharkBoxing:
		case MAP_NewReno_Wright:
			locationname = "New Reno" ;
			location = LOCATION_NewReno;
			
		switch(trader.Param[ST_DIALOG_ID])
			{
				case DIALOG_nr_jules: // Jules
					npctrader = "Jules" ;
					type = EVENT_TYPE_TRADER_1;
					break;
				case DIALOG_nr_barmen: // Some bartender 
					npctrader = "Some bartender" ;
					type = EVENT_TYPE_TRADER_2;
					break;
				case DIALOG_nr_eldrid: // Eldridge
					npctrader = "Eldridge" ;
					type = EVENT_TYPE_TRADER_3;
					break;
				case DIALOG_nr_renesco: // Renesco
					npctrader = "Renesco" ;
					type = EVENT_TYPE_TRADER_4;
					break;
				
				default: if(!GMCreated) npctrader = "NOT RECOGNIZED CritterID: " + trader.Id ; type = EVENT_TYPE_TRADER_UNKNOWN; break;
			}
			break;

		case MAP_NCR:
			locationname = "NCR" ;
			location = LOCATION_NCR;
			
			switch(trader.Param[ST_DIALOG_ID])
			{
				case DIALOG_ncr_shaenine: // Seumour
					npctrader = "Seumour" ;
					type = EVENT_TYPE_TRADER_1;
					break;
				case DIALOG_ncr_trader_buster: // Buster
					npctrader = "Buster" ;
					type = EVENT_TYPE_TRADER_2;
					break;
				case DIALOG_ncr_barmen_mira: // Mira
					npctrader = "Mira" ;
					type = EVENT_TYPE_TRADER_3;
					break;
				case DIALOG_ncr_barmen_dasty: // Dusty
					npctrader = "Dusty" ;
					type = EVENT_TYPE_TRADER_4;
					break;
				case DIALOG_ncr_doctor_jubiley: //Doc Jubilee
					npctrader = "Doc Jubilee" ;
					type = EVENT_TYPE_TRADER_5;
					break;

				default: if(!GMCreated) npctrader = "NOT RECOGNIZED CritterID: " + trader.Id ; type = EVENT_TYPE_TRADER_UNKNOWN; break;
			}
			break;

		case MAP_SanFranTanker:
		case MAP_SanFranChina:
			locationname = "San Francisco" ;
			location = LOCATION_SanFrancisco;
			
			switch(trader.Param[ST_DIALOG_ID])
			{
				case DIALOG_san_doctor_fung: // Dr Fung
					npctrader = "Fung" ;
					type = EVENT_TYPE_TRADER_1;
					break;
				case DIALOG_san_trader_lao: // Lao Chou
					npctrader = "Chou" ;
					type = EVENT_TYPE_TRADER_2;
					break;
				case DIALOG_san_trader_karl: // Cal
					npctrader = "Cal" ;
					type = EVENT_TYPE_TRADER_3;
					break;
				case DIALOG_san_trader_jenny: // Jenna
					npctrader = "Jenna" ;
					type = EVENT_TYPE_TRADER_4;
					break;
				case DIALOG_san_barmen_slim: // Slim
					npctrader = "Slim" ;
					type = EVENT_TYPE_TRADER_5;
					break;
				case DIALOG_san_trader_chiang: // Ma Da Chiang
					npctrader = "Ma Da Chiang" ;
					type = EVENT_TYPE_TRADER_6;
					break;
				
				default: if(!GMCreated) npctrader = "NOT RECOGNIZED CritterID: " + trader.Id ; type = EVENT_TYPE_TRADER_UNKNOWN; break;
			}
			break;

		case MAP_Junktown:
			locationname = "Junktown" ;
			location = LOCATION_Junktown;
			
			switch(trader.Param[ST_DIALOG_ID])
			{
				case DIALOG_junktown_killian: // Jeremiah
					npctrader = "Jeremiah" ;
					type = EVENT_TYPE_TRADER_1;
					break;

				default: if(!GMCreated) npctrader = "NOT RECOGNIZED CritterID: " + trader.Id ; type = EVENT_TYPE_TRADER_UNKNOWN; break;
			}
			break;

		case MAP_HubDowntown:
		case MAP_HubOldtown:
			locationname = "Hub" ;
			location = LOCATION_Hub;
			
			switch(trader.Param[ST_DIALOG_ID])
			{
				case DIALOG_hub_mitch: // Mitch
					npctrader = "Mitch" ;
					type = EVENT_TYPE_TRADER_1;
					break;
				case DIALOG_hub_beth: // Beth
					npctrader = "Beth" ;
					type = EVENT_TYPE_TRADER_2;
					break;
				case DIALOG_hub_jacob: // Jacob
					npctrader = "Jacob" ;
					type = EVENT_TYPE_TRADER_3;
					break;
				case DIALOG_hub_library :
					npctrader = "Mrs. Stapleton";
					type = EVENT_TYPE_TRADER_4;
					break;
				
				default: if(!GMCreated) npctrader = "NOT RECOGNIZED CritterID: " + trader.Id ; type = EVENT_TYPE_TRADER_UNKNOWN; break;
			}
			break;

		case MAP_NecropolisHotel:
			locationname = "Necropolis" ;
			location = LOCATION_Necropolis;
			
			switch(trader.Param[ST_DIALOG_ID])
			{
				case DIALOG_cath_shopkeeper: // Shopkeeper
					npctrader = "Shopkeeper" ;
					type = EVENT_TYPE_TRADER_1;
					break;

				default: if(!GMCreated) npctrader = "NOT RECOGNIZED CritterID: " + trader.Id ; type = EVENT_TYPE_TRADER_UNKNOWN; break;
			}
			break;
			
		case MAP_BoneyardTrainStation:
			locationname = "Boneyard Train Station" ;
			location = LOCATION_Trainyard2;
			
			switch(trader.Param[ST_DIALOG_ID])
			{
				case DIALOG_la_ady_taylor: // Taylor
					npctrader = "Taylor" ;
					type = EVENT_TYPE_TRADER_1;
					break;
					
				default: if(!GMCreated) npctrader = "NOT RECOGNIZED CritterID: " + trader.Id ; type = EVENT_TYPE_TRADER_UNKNOWN; break;
			}
			break;

		case MAP_Adytum:
			locationname = "Adytum" ;
			location = LOCATION_Boneyard;
			
			switch(trader.Param[ST_DIALOG_ID])
			{
				case DIALOG_la_ady_gunsmith: // Jargo
					npctrader = "Jargo" ;
					type = EVENT_TYPE_TRADER_1;
					break;
					
				case DIALOG_gun_zack: // Ralph
					npctrader = "Ralph" ;
					type = EVENT_TYPE_TRADER_2;
					break;

				default: if(!GMCreated) npctrader = "NOT RECOGNIZED CritterID: " + trader.Id ; type = EVENT_TYPE_TRADER_UNKNOWN; break;
			}
			break;

		/*case MAP_Gunrunner:
			locationname = "Gun Runners" ;
			location = LOCATION_Fortress;
			
			switch(trader.Param[ST_DIALOG_ID])
			{
				case DIALOG_gun_zack: // Ralph
					npctrader = "Ralph" ;
					type = EVENT_TYPE_TRADER_1;
					break;

				default: if(!GMCreated) npctrader = "NOT RECOGNIZED CritterID: " + trader.Id ; type = EVENT_TYPE_TRADER_UNKNOWN; break;
			}
			break;*/
			
		/*case MAP_GunRunners:
				return 0;*/

		case MAP_KhansCaveEntrance:

			locationname = "Khans's Base" ;
			location = LOCATION_Raiders;
			
			switch(trader.Param[ST_DIALOG_ID])
			{
				case DIALOG_raiders_augustus: // Augustus
					npctrader = "Augustus" ;
					type = EVENT_TYPE_TRADER_1;
					break;
					
				case DIALOG_raiders_art: // Art
					npctrader = "Art" ;
					type = EVENT_TYPE_TRADER_2;
					break;

				default: if(!GMCreated) npctrader = "NOT RECOGNIZED CritterID: " + trader.Id ; type = EVENT_TYPE_TRADER_UNKNOWN; break;
			}
			break;

		case MAP_GordonsGasStation:
			locationname = "Gordnon's Gas Station" ;
			location = LOCATION_GordonsGasStation;
			
			switch(trader.Param[ST_DIALOG_ID])
			{
				case DIALOG_ul_gas_gordon: // Gordon
					npctrader = "Gordon" ;
					type = EVENT_TYPE_TRADER_1;
					break;

				default: if(!GMCreated) npctrader = "NOT RECOGNIZED CritterID: " + trader.Id ; type = EVENT_TYPE_TRADER_UNKNOWN; break;
			}
			break;
		
		case MAP_Vegas:
			locationname = "Las Vegas";
			location = LOCATION_Vegas;
			switch(trader.Param[ST_DIALOG_ID])
			{
				case DIALOG_vegas_paul: // Paul Tibbett
					npctrader = "Paul" ;
					type = EVENT_TYPE_TRADER_1;
					break;
					
				case DIALOG_vegas_tony: // Tony
					npctrader = "Tony" ;
					type = EVENT_TYPE_TRADER_2;
					break;
					
				case DIALOG_vegas_woody: // Woody
					npctrader = "Woody" ;
					type = EVENT_TYPE_TRADER_3;
					break;
					
				case DIALOG_nr_barmen: // Some bartender 
					npctrader = "Some bartender" ;
					type = EVENT_TYPE_TRADER_4;
					break;

				default: if(!GMCreated) npctrader = "NOT RECOGNIZED CritterID: " + trader.Id ; type = EVENT_TYPE_TRADER_UNKNOWN; break;
			}
			break;
			
		case MAP_SaltLake:
			locationname = "Salt Lake City";
			location = LOCATION_SaltLake;
			switch(trader.Param[ST_DIALOG_ID])
			{
				case DIALOG_saltlake_roger: // Roger Kwok
					npctrader = "Roger" ;
					type = EVENT_TYPE_TRADER_1;
					break;
					
				case DIALOG_saltlake_steven: // Steven Quok
					npctrader = "Steven" ;
					type = EVENT_TYPE_TRADER_2;
					break;
					
				case DIALOG_saltlake_joe: // Jovial Joe
					npctrader = "Joe" ;
					type = EVENT_TYPE_TRADER_3;
					break;
					
				case DIALOG_saltlake_pharmacist: // Pharmacist
					npctrader = "Pharmacist" ;
					type = EVENT_TYPE_TRADER_4;
					break;

				default: if(!GMCreated) npctrader = "NOT RECOGNIZED CritterID: " + trader.Id ; type = EVENT_TYPE_TRADER_UNKNOWN; break;
			}
			break;
			
		case MAP_Hawthorne:
			locationname = "Social Accommodation of Hawthorne Military Base";
			location = LOCATION_Hawthorne;
			switch(trader.Param[ST_DIALOG_ID])
			{
				case DIALOG_hawthorne_liquidjoe: // Liquid Joe
					npctrader = "Joe" ;
					type = EVENT_TYPE_TRADER_1;
					break;
					
				case DIALOG_hawthorne_fernandez: // Cpt. Fernandez
					npctrader = "Fernandez" ;
					type = EVENT_TYPE_TRADER_2;
					break;
					
				default: if(!GMCreated) npctrader = "NOT RECOGNIZED CritterID: " + trader.Id ; type = EVENT_TYPE_TRADER_UNKNOWN; break;
			}
			break;
			
		default:
			locationname = "NOT DEFINED IN SWITCH-CASE MapProtoID: " + map.GetProtoId() + ",LocationProtoID: " + location; 
			npctrader = "NOT RECOGNIZED CritterID: " + trader.Id;
			type = EVENT_TYPE_TRADER_UNKNOWN;
			break;
	}
	
	
	
	
	
	Item@ it = trader.AddItem(item, ilosc);
	SETFLAG(it.Flags, ITEM_ALWAYS_VIEW);
	
	if(!it.IsStackable())
	switch(itemkind)
	{
		case 2:
		case 3:
		case 5:
		case 6: AddSpecialBonus(it); break;
		default: AddBonusOrNot(it); break;
	}
		
	baseprice = it.GetCost();
	podniesienieceny = it.GetCost();
		
	
	if(it.Val0 >= 100)
	{
		bonustype = " Quality ";
		it.Cost = 3 * (baseprice + podniesienieceny / 2 );
	}
	
	if(it.Val1 >= 100)
	{
		bonustype = " Improved ";
		it.Cost = 4 * (baseprice + podniesienieceny / 2 );
	}
	
	if(it.Val2 >= 100)
	{
		bonustype = " Superior ";
		it.Cost = 5 * (baseprice + podniesienieceny / 2 );
	}
	
	if(it.Val3 >= 100)
	{
		bonustype = " Advanced ";
		it.Cost = 6 * (baseprice + podniesienieceny / 2 );
	}
	
	if(it.Val4 >= 100)
	{
		bonustype = " Unique ";
		it.Cost = 7 * (baseprice + podniesienieceny / 2 );
	}
	
	if(it.IsStackable())
	{
		if(it.GetType() == ITEM_TYPE_AMMO)
		{
			ilosc = Random(10, 100);
			trader.AddItem(item, ilosc - 1);
			bonustype = " " + ilosc + " pcs of ";
		}
		stackable = 1; // true
	}
	
	
	
	array<uint> eventdata = { trader.Id, item, ilosc, location, type, it.Id, stackable, values[1] };
	CreateTimeEvent(AFTER(timeleft), "e_SpecialItemEventErase", eventdata, true);
	CreateTimeEvent(AFTER(REAL_SECOND(1)), "e_SpecialItemSold", eventdata, false);
	
	if(trader.IsNpc())
		trader.StatBase[ST_REPLICATION_TIME] = REPLICATION_MINUTE(1);
	
	// Broadcast na czas timeleft
	if(GMCreated)
		ServerEventCNTSet((trader.IsPlayer() ? trader.Name : npctrader ) + " in " + (GetLocationName(trader.GetMap().GetLocation().Id)) + " has" + bonustype + itemname + " for sale. Time left %COUNTDOWN%.", location, type, timeleft);
	else
		ServerEventCNTSet(npctrader + " in " + locationname + " has" + bonustype + itemname + " for sale. Time left %COUNTDOWN%.", location, type, timeleft);
	
	if(GMCreated) return 0;
	else return REAL_MINUTE(Random(360, 14400));
}

uint e_SpecialItemEventErase(array<uint>@ values)
{
	
	Critter@ trader = GetCritter(values[0]);
	if(!valid(trader))
		return 0;
	uint item = values[1], ilosc = values[2], location = values[3], type = values[4], liczitemy;
	uint8 stackable = values[6];	
		
	if(stackable == 1)
	{
		
		liczitemy = trader.CountItem(item);
		trader.DeleteItem(item, liczitemy);
		if(liczitemy != 0)
		{
			ServerEventMSG(BROADCAST_DISPLAY_TIME, "No offers.");
			if(trader.IsNpc())
					trader.StatBase[ST_REPLICATION_TIME] = REPLICATION_MINUTE(10);
		}
	}
		
	else if(stackable == 0)
	{
		Item@ it = GetItem(values[5]);
		if(!valid(it))
			return 0;
			
		array<Item@> items;
		uint itemCount = trader.GetItems(SLOT_INV, items);
		
		for(uint i = 0; i < itemCount; i++)
			if(items[i].Id == it.Id)
			{	
				DeleteItem(it);
				ServerEventMSG(BROADCAST_DISPLAY_TIME, "No offers.");
				if(trader.IsNpc())
					trader.StatBase[ST_REPLICATION_TIME] = REPLICATION_MINUTE(10);
			}
				
		itemCount = trader.GetItems(SLOT_HAND1, items);
		for(uint i = 0; i < itemCount; i++)
			if(items[i].Id == it.Id)
			{
				DeleteItem(it);
				ServerEventMSG(BROADCAST_DISPLAY_TIME, "No offers.");
				if(trader.IsNpc())
					trader.StatBase[ST_REPLICATION_TIME] = REPLICATION_MINUTE(10);
			}
	}
	
	return 0;
}

uint e_SpecialItemSold(array<uint>@ values)
{
	bool sold = false;
	bool GMCreated = (values[7] == 0 ? false : true);
	
	Critter@ trader = GetCritter(values[0]);
	if(!valid(trader))
		return 0;
		
	Item@ it = GetItem(values[5]);
	if(!valid(it))
		return 0;
		
	uint item = values[1], location = values[3], type = values[4];
	uint8 stackable = values[6];
		
	if(stackable == 1)
		if(trader.CountItem(item) == 0 && valid(it))
		{
			sold = true;
		}
			
	if(stackable == 0 && valid(it))
	{
		array<Item@> items;
		uint itemCount = trader.GetItems(SLOT_INV, items);
		sold = true;
		for(uint i = 0; i < itemCount; i++)
			if(items[i].Id == it.Id)
				sold = false;
		itemCount = trader.GetItems(SLOT_HAND1, items);
		for(uint i = 0; i < itemCount; i++)
			if(items[i].Id == it.Id)
				sold = false;
	}
	
	if(sold)
	{
		string locationname, npctrader = "This someone";
		
		Map@ map = trader.GetMap();
		UNSETFLAG(it.Flags, ITEM_ALWAYS_VIEW);
	
		switch(map.GetProtoId())
		{
			case MAP_DenBusiness:
				locationname = "Den" ;
				location = LOCATION_TheDen;
			
				switch(trader.Param[ST_DIALOG_ID])
				{
					case DIALOG_den_flik:  // flick
						npctrader = "Flick" ;
						type = EVENT_TYPE_TRADER_1;
						break;
					case DIALOG_den_mom:
						npctrader = "Mom" ;
						type = EVENT_TYPE_TRADER_2;
						break;
					case DIALOG_den_bekky: // rebecca
						npctrader = "Rebecca" ;
						type = EVENT_TYPE_TRADER_3;
						break;
					case DIALOG_den_tubby:
						npctrader = "Tubby" ;
						type = EVENT_TYPE_TRADER_4;
						break;
					case DIALOG_den_billy: // it's this frank
						npctrader = "Frank" ;
						type = EVENT_TYPE_TRADER_5;
						break;

					default: if(!GMCreated) npctrader = "NOT RECOGNIZED CritterID: " + trader.Id ; type = EVENT_TYPE_TRADER_UNKNOWN; break;
				}
				break;

			case MAP_KlamathDowntown:
				locationname = "Klamath" ;
				location = LOCATION_Klamath;
			
				switch(trader.Param[ST_DIALOG_ID])
				{
					case DIALOG_klam_majda: // Maida Buckner
						npctrader = "Maida Buckner" ;
						type = EVENT_TYPE_TRADER_1;
						break;
					default: if(!GMCreated) npctrader = "NOT RECOGNIZED CritterID: " + trader.Id ; type = EVENT_TYPE_TRADER_UNKNOWN; break;
				}
				break;
			
			case MAP_ModocLarge:
				locationname = "Modoc" ;
				location = LOCATION_Modoc;
			
				switch(trader.Param[ST_DIALOG_ID])
				{
					case DIALOG_mod_grishem: // Grisham
						npctrader = "Grisham" ;
						type = EVENT_TYPE_TRADER_1;
						break;
					case DIALOG_mod_joe: // Jo
						npctrader = "Jo" ;
						type = EVENT_TYPE_TRADER_2;
						break;
					case DIALOG_mod_baltas: // Balthas
					npctrader = "Balthas" ;
						type = EVENT_TYPE_TRADER_3;
						break;
					case DIALOG_mod_hose: // Mook
					npctrader = "Mook" ;
						type = EVENT_TYPE_TRADER_4;
						break;
					default: if(!GMCreated) npctrader = "NOT RECOGNIZED CritterID: " + trader.Id ; type = EVENT_TYPE_TRADER_UNKNOWN; break;
				}
				break;

			case MAP_VaultCityDowntown:
				locationname = "Vault City" ;
				location = LOCATION_VaultCity;
			
				switch(trader.Param[ST_DIALOG_ID])
				{
					case DIALOG_vaul_macrae: // McRae
						npctrader = "McRae" ;
						type = EVENT_TYPE_TRADER_1;
						break;
					case DIALOG_vaul_garry: // Harry
						npctrader = "Harry" ;
						type = EVENT_TYPE_TRADER_2;
						break;
					case DIALOG_vaul_doctor_andru: // Doctor Andrew
						npctrader = "Doctor Andrew" ;
						type = EVENT_TYPE_TRADER_3;
						break;
					case DIALOG_vaul_randal: // Randal
						npctrader = "Randal" ;
						type = EVENT_TYPE_TRADER_4;
						break;
					case DIALOG_vaul_darrow: // Darrow (A)
						npctrader = "Darrow" ;
						type = EVENT_TYPE_TRADER_5;
						break;
					case DIALOG_vaul_hoden: // Holden (B)
						npctrader = "Holden" ;
						type = EVENT_TYPE_TRADER_6;
						break;
					default: if(!GMCreated) npctrader = "NOT RECOGNIZED CritterID: " + trader.Id ; type = EVENT_TYPE_TRADER_UNKNOWN; break;
				}
				break;

			case MAP_GeckoSettlement:
				locationname = "Gecko" ;
				location = LOCATION_Gecko;
			
				switch(trader.Param[ST_DIALOG_ID])
				{
					case DIALOG_geck_wooz: // Wooz
						npctrader = "Wooz" ;
						type = EVENT_TYPE_TRADER_1;
						break;
					case DIALOG_geck_persi: // Percy
						npctrader = "Percy" ;
						type = EVENT_TYPE_TRADER_2;
						break;
					case DIALOG_geck_sceetr: // Skeeter
						npctrader = "Skeeter" ;
						type = EVENT_TYPE_TRADER_3;
						break;
					default: if(!GMCreated) npctrader = "NOT RECOGNIZED CritterID: " + trader.Id ; type = EVENT_TYPE_TRADER_UNKNOWN; break;
				}
				break;

			case MAP_Redding:
				locationname = "Redding" ;
				location = LOCATION_Redding;
			
				switch(trader.Param[ST_DIALOG_ID])
				{
					case DIALOG_redd_askorti: // Ascorti
						npctrader = "Ascorti" ;
						type = EVENT_TYPE_TRADER_1;
						break;
					case DIALOG_redd_doctor: // Doc Johnson
						npctrader = "Doc Johnson" ;
						type = EVENT_TYPE_TRADER_2;
						break;
					default: if(!GMCreated) npctrader = "NOT RECOGNIZED CritterID: " + trader.Id ; type = EVENT_TYPE_TRADER_UNKNOWN; break;
				}
				break;

			case MAP_BrokenHills:
				locationname = "Broken Hills" ;
				location = LOCATION_BrokenHills;
			
				switch(trader.Param[ST_DIALOG_ID])
				{
					case DIALOG_bh_liz: // Liz
						npctrader = "Liz" ;
						type = EVENT_TYPE_TRADER_1;
						break;
					case DIALOG_bh_outfit: // Bill
						npctrader = "Bill" ;
						type = EVENT_TYPE_TRADER_2;
						break;
					case DIALOG_bh_phil: // Phil
						npctrader = "Phil" ;
						type = EVENT_TYPE_TRADER_3;
						break;
					case DIALOG_bh_jacob: // Jacob
						npctrader = "Jacob" ;
						type = EVENT_TYPE_TRADER_4;
						break;
					case DIALOG_bh_doc: // DocHolliday
						npctrader = "Doc Holliday" ;
						type = EVENT_TYPE_TRADER_5;
						break;
					
					default: if(!GMCreated) npctrader = "NOT RECOGNIZED CritterID: " + trader.Id ; type = EVENT_TYPE_TRADER_UNKNOWN; break;
				}
				break;

			case MAP_NewReno1:
			case MAP_NewReno2:
			case MAP_NewReno3:
			case MAP_NewReno_SharkBoxing:
			case MAP_NewReno_Wright:
				locationname = "New Reno" ;
				location = LOCATION_NewReno;
			
			switch(trader.Param[ST_DIALOG_ID])
				{
					case DIALOG_nr_jules: // Jules
						npctrader = "Flick" ;
						type = EVENT_TYPE_TRADER_1;
						break;
					case DIALOG_nr_barmen: // Some bartender 
						npctrader = "Some bartender" ;
						type = EVENT_TYPE_TRADER_2;
						break;
					case DIALOG_nr_eldrid: // Eldridge
						npctrader = "Eldridge" ;
						type = EVENT_TYPE_TRADER_3;
						break;
					case DIALOG_nr_renesco: // Renesco
						npctrader = "Renesco" ;
						type = EVENT_TYPE_TRADER_4;
						break;
				
					default: if(!GMCreated) npctrader = "NOT RECOGNIZED CritterID: " + trader.Id ; type = EVENT_TYPE_TRADER_UNKNOWN; break;
				}
				break;

			case MAP_NCR:
				locationname = "NCR" ;
				location = LOCATION_NCR;
			
				switch(trader.Param[ST_DIALOG_ID])
				{
					case DIALOG_ncr_shaenine: // Seumour
						npctrader = "Seumour" ;
						type = EVENT_TYPE_TRADER_1;
						break;
					case DIALOG_ncr_trader_buster: // Buster
						npctrader = "Buster" ;
						type = EVENT_TYPE_TRADER_2;
						break;
					case DIALOG_ncr_barmen_mira: // Mira
						npctrader = "Mira" ;
						type = EVENT_TYPE_TRADER_3;
						break;
					case DIALOG_ncr_barmen_dasty: // Dusty
						npctrader = "Dusty" ;
						type = EVENT_TYPE_TRADER_4;
						break;
					case DIALOG_ncr_doctor_jubiley: //Doc Jubilee
						npctrader = "Doc Jubilee" ;
						type = EVENT_TYPE_TRADER_5;
						break;

					default: if(!GMCreated) npctrader = "NOT RECOGNIZED CritterID: " + trader.Id ; type = EVENT_TYPE_TRADER_UNKNOWN; break;
				}
				break;

			case MAP_SanFranTanker:
			case MAP_SanFranChina:
				locationname = "San Francisco" ;
				location = LOCATION_SanFrancisco;
			
				switch(trader.Param[ST_DIALOG_ID])
				{
					case DIALOG_san_doctor_fung: // Dr Fung
						npctrader = "Fung" ;
						type = EVENT_TYPE_TRADER_1;
						break;
					case DIALOG_san_trader_lao: // Lao Chou
						npctrader = "Chou" ;
						type = EVENT_TYPE_TRADER_2;
						break;
					case DIALOG_san_trader_karl: // Cal
						npctrader = "Cal" ;
						type = EVENT_TYPE_TRADER_3;
						break;
					case DIALOG_san_trader_jenny: // Jenna
						npctrader = "Jenna" ;
						type = EVENT_TYPE_TRADER_4;
						break;
					case DIALOG_san_barmen_slim: // Slim
						npctrader = "Slim" ;
						type = EVENT_TYPE_TRADER_5;
						break;
					case DIALOG_san_trader_chiang: // Ma Da Chiang
						npctrader = "Ma Da Chiang" ;
						type = EVENT_TYPE_TRADER_6;
						break;
				
					default: if(!GMCreated) npctrader = "NOT RECOGNIZED CritterID: " + trader.Id ; type = EVENT_TYPE_TRADER_UNKNOWN; break;
				}
				break;

			case MAP_Junktown:
				locationname = "Junktown" ;
				location = LOCATION_Junktown;
			
				switch(trader.Param[ST_DIALOG_ID])
				{
					case DIALOG_junktown_killian: // Jeremiah
						npctrader = "Jeremiah" ;
						type = EVENT_TYPE_TRADER_1;
						break;

					default: if(!GMCreated) npctrader = "NOT RECOGNIZED CritterID: " + trader.Id ; type = EVENT_TYPE_TRADER_UNKNOWN; break;
				}
				break;

			case MAP_HubDowntown:
			case MAP_HubOldtown:
				locationname = "Hub" ;
				location = LOCATION_Hub;
			
				switch(trader.Param[ST_DIALOG_ID])
				{
					case DIALOG_hub_mitch: // Mitch
						npctrader = "Mitch" ;
						type = EVENT_TYPE_TRADER_1;
						break;
					case DIALOG_hub_beth: // Beth
						npctrader = "Beth" ;
						type = EVENT_TYPE_TRADER_2;
						break;
					case DIALOG_hub_jacob: // Jacob
						npctrader = "Jacob" ;
						type = EVENT_TYPE_TRADER_3;
						break;
					case DIALOG_hub_library :
						npctrader = "Mrs. Stapleton";
						type = EVENT_TYPE_TRADER_4;
						break;
				
					default: if(!GMCreated) npctrader = "NOT RECOGNIZED CritterID: " + trader.Id ; type = EVENT_TYPE_TRADER_UNKNOWN; break;
				}
				break;

			case MAP_NecropolisSeth:
				locationname = "Necropolis" ;
				location = LOCATION_Necropolis;
			
				switch(trader.Param[ST_DIALOG_ID])
				{
					case DIALOG_cath_shopkeeper: // Shopkeeper
						npctrader = "Shopkeeper" ;
						type = EVENT_TYPE_TRADER_1;
						break;

					default: if(!GMCreated) npctrader = "NOT RECOGNIZED CritterID: " + trader.Id ; type = EVENT_TYPE_TRADER_UNKNOWN; break;
				}
				break;
			
			case MAP_BoneyardTrainStation:
				locationname = "Boneyard Train Station" ;
				location = LOCATION_Trainyard2;
			
				switch(trader.Param[ST_DIALOG_ID])
				{
					case DIALOG_la_ady_taylor: // Taylor
						npctrader = "Taylor" ;
						type = EVENT_TYPE_TRADER_1;
						break;
					
					default: if(!GMCreated) npctrader = "NOT RECOGNIZED CritterID: " + trader.Id ; type = EVENT_TYPE_TRADER_UNKNOWN; break;
				}
				break;

			case MAP_Adytum:
				locationname = "Adytum" ;
				location = LOCATION_Boneyard;

				switch(trader.Param[ST_DIALOG_ID])
				{
					case DIALOG_la_ady_gunsmith: // Jargo
						npctrader = "Jargo" ;
						type = EVENT_TYPE_TRADER_1;
						break;
						
					case DIALOG_gun_zack: // Ralph
						npctrader = "Ralph" ;
						type = EVENT_TYPE_TRADER_2;
						break;

					default: if(!GMCreated) npctrader = "NOT RECOGNIZED CritterID: " + trader.Id ; type = EVENT_TYPE_TRADER_UNKNOWN; break;
				}
				break;

			/*case MAP_Gunrunner:
				locationname = "Gun Runners" ;
				location = LOCATION_Fortress;
			
				switch(trader.Param[ST_DIALOG_ID])
				{
					case DIALOG_gun_zack: // Ralph
						npctrader = "Ralph" ;
						type = EVENT_TYPE_TRADER_1;
						break;

				default: if(!GMCreated) npctrader = "NOT RECOGNIZED CritterID: " + trader.Id ; type = EVENT_TYPE_TRADER_UNKNOWN; break;
				}
			break;*/

			case MAP_KhansCaveEntrance:

				locationname = "Khans's Base" ;
				location = LOCATION_Raiders;
			
				switch(trader.Param[ST_DIALOG_ID])
				{
					case DIALOG_raiders_augustus: // Augustus
						npctrader = "Augustus" ;
						type = EVENT_TYPE_TRADER_1;
						break;
					case DIALOG_raiders_art: // Art
						npctrader = "Art" ;
						type = EVENT_TYPE_TRADER_2;
						break;

					default: if(!GMCreated) npctrader = "NOT RECOGNIZED CritterID: " + trader.Id ; type = EVENT_TYPE_TRADER_UNKNOWN; break;
				}
				break;

			case MAP_GordonsGasStation:
				locationname = "Gordnon's Gas Station" ;
				location = LOCATION_GordonsGasStation;
			
				switch(trader.Param[ST_DIALOG_ID])
				{
					case DIALOG_ul_gas_gordon: // Gordon
						npctrader = "Gordon" ;
						type = EVENT_TYPE_TRADER_1;
						break;

					default: if(!GMCreated) npctrader = "NOT RECOGNIZED CritterID: " + trader.Id ; type = EVENT_TYPE_TRADER_UNKNOWN; break;
				}
				break;
			
			case MAP_Vegas:
				locationname = "Las Vegas";
				location = LOCATION_Vegas;
				switch(trader.Param[ST_DIALOG_ID])
				{
					case DIALOG_vegas_paul: // Paul Tibbett
						npctrader = "Paul" ;
						type = EVENT_TYPE_TRADER_1;
						break;
						
					case DIALOG_vegas_tony: // Tony
						npctrader = "Tony" ;
						type = EVENT_TYPE_TRADER_2;
						break;
						
					case DIALOG_vegas_woody: // Woody
						npctrader = "Woody" ;
						type = EVENT_TYPE_TRADER_3;
						break;
						
					case DIALOG_nr_barmen: // Some bartender 
						npctrader = "Some bartender" ;
						type = EVENT_TYPE_TRADER_4;
						break;

					default: if(!GMCreated) npctrader = "NOT RECOGNIZED CritterID: " + trader.Id ; type = EVENT_TYPE_TRADER_UNKNOWN; break;
				}
				break;
			
			case MAP_SaltLake:
				locationname = "Salt Lake City";
				location = LOCATION_SaltLake;
				switch(trader.Param[ST_DIALOG_ID])
				{
					case DIALOG_saltlake_roger: // Roger Kwok
						npctrader = "Roger" ;
						type = EVENT_TYPE_TRADER_1;
						break;
						
					case DIALOG_saltlake_steven: // Steven Quok
						npctrader = "Steven" ;
						type = EVENT_TYPE_TRADER_2;
						break;
					
					case DIALOG_saltlake_joe: // Jovial Joe
						npctrader = "Joe" ;
						type = EVENT_TYPE_TRADER_3;
						break;
						
					case DIALOG_saltlake_pharmacist: // Pharmacist
						npctrader = "Pharmacist" ;
						type = EVENT_TYPE_TRADER_4;
						break;

					default: if(!GMCreated) npctrader = "NOT RECOGNIZED CritterID: " + trader.Id ; type = EVENT_TYPE_TRADER_UNKNOWN; break;
				}
				break;
				
			case MAP_Hawthorne:
				locationname = "Social Accommodation of Hawthorne Military Base";
				location = LOCATION_Hawthorne;
				switch(trader.Param[ST_DIALOG_ID])
				{
					case DIALOG_hawthorne_liquidjoe: // Liquid Joe
						npctrader = "Joe" ;
						type = EVENT_TYPE_TRADER_1;
						break;
						
					case DIALOG_hawthorne_fernandez: // Cpt. Fernandez
						npctrader = "Fernandez" ;
						type = EVENT_TYPE_TRADER_2;
						break;

					default: if(!GMCreated) npctrader = "NOT RECOGNIZED CritterID: " + trader.Id ; type = EVENT_TYPE_TRADER_UNKNOWN; break;
				}
				break;
			
			default:
				locationname = "NOT DEFINED IN SWITCH-CASE"; 
				if(!GMCreated) npctrader = "NOT RECOGNIZED CritterID: " + trader.Id ;
				break;
		}
		
		ServerEventCNTStop(location, type);
		if(trader.IsNpc())
			trader.StatBase[ST_REPLICATION_TIME] = REPLICATION_MINUTE(10);
		if(GMCreated)
			ServerEventMSG(BROADCAST_DISPLAY_TIME, (trader.IsPlayer() ? trader.Name : npctrader ) + " has sold item.");
		else
			ServerEventMSG(BROADCAST_DISPLAY_TIME, npctrader + " has sold item.");
		return 0;
	}
	
	return REAL_SECOND(1);
}

bool IsStackItemFromEvent(uint16 pid)
{
	return (pid == PID_4_7MM_CASELESS || pid == PID_2MM_EC_AMMO);
}
/*
   void SortItemArrays()
   {
   for (int index = 0, lists_length = lists.length(); index < lists_length; index++)
   {
    //uint[] list = lists[index];
    uint[] vals(lists[index].length());
    for (int i=0, j=lists[index].length(); i < j; i++)
      vals[i]=BaseItemValue(lists[index][i], true);

    //for (int i=0, j=lists[index].length(); i < j; i++)
      //Log("index "+index+" SA PRE: "+lists[index][i]+","+vals[i]);



    //for (int i=0, j=lists[index].length(); i < j; i++)
      //Log("index "+index+" SA post "+i+": "+lists[index][i]+","+vals[i]);

    }

    for (int i=0, j=lists[index].length(); i < j; i++)
      Log("index "+index+" SA: "+lists[index][i]+","+vals[i]);

   }
   }
 */
// starting lists
uint[][] sg1 = { { PID_44_MAGNUM_REVOLVER, 1 }, { PID_DESERT_EAGLE, 1 }, { PID_HUNTING_RIFLE, 1 }, { PID_TOMMY_GUN, 1 }, { PID_SHOTGUN, 1 }, { PID_SAWED_OFF_SHOTGUN, 1 }, { PID_GREASE_GUN, 1 }, { PID_44_MAGNUM_JHP, 20 }, { PID_10MM_JHP, 50 }, { PID_9MM_BALL, 10 }, { PID_SHOTGUN_SHELLS, 30 }, { PID_SHOTGUN_SHELLS_FLECHETTE, 10 }, { PID_SHOTGUN_SHELLS_SLUG, 10 }, { PID_45_CALIBER_AMMO, 20 } };

uint[][] sg2 = { { PID_14MM_PISTOL, 1 }, { PID_ASSAULT_RIFLE, 1 }, { PID_10MM_SMG, 1 }, { PID_COMBAT_SHOTGUN, 1 }, { PID_SHOTGUN_SHELLS, 30 }, { PID_SHOTGUN_SHELLS_FLECHETTE, 20 }, { PID_SHOTGUN_SHELLS_EMP, 10 }, { PID_SHOTGUN_SHELLS_SLUG, 20 }, { PID_5MM_JHP, 250 }, { PID_14MM_AP, 100 },{PID_40MM_GRENADE, 10},{PID_GRENADE_LAUNCHER,1}, {PID_GRENADE_PISTOL,1},   {PID_223_FMJ, 100} };
uint[][] sg3 = { { PID_SNIPER_RIFLE, 1 }, { PID_HK_CAWS, 1 }, { PID_223_PISTOL, 1 }, { PID_INDEPENDENT, 1 }, { PID_HK_P90C, 1 }, { PID_PANCOR_JACKHAMMER, 1 }, 
                 {PID_40MM_GRENADE, 10}, {PID_GRENADE_LAUNCHER,1}, {PID_GRENADE_PISTOL,1}, { PID_5MM_AP, 250 }, { PID_SHOTGUN_SHELLS, 50 }, { PID_SHOTGUN_SHELLS_FLECHETTE, 20 }, { PID_SHOTGUN_SHELLS_SLUG, 20 }, { PID_SHOTGUN_SHELLS_EMP, 20 },{ PID_10MM_AP, 50 }};

uint[][] bg1 = { { PID_FLAMER, 1 }, { PID_ROCKET_LAUNCHER, 1 }, { PID_FLAMETHROWER_FUEL, 10 }, { PID_EXPLOSIVE_ROCKET, 1 }, {PID_7_62MM_AMMO, 100}, {PID_M60,1} };
uint[][] bg2 = { { PID_5MM_AP, 250 }, { PID_ADV_SUPERBURN, 10 }, { PID_ROCKET_AP, 8 }, { PID_5MM_JHP, 250 }, {PID_223_FMJ, 100},
                 { PID_MINIGUN, 1 }, { PID_LIGHT_SUPPORT_WEAPON, 1 }, {PID_AVENGER_MINIGUN,1}};
uint[][] bg3 = {};

uint[][] en1 = { { PID_LASER_RIFLE, 1 }, { PID_SMALL_ENERGY_CELL, 30 }};
uint[][] en2 = { { PID_PLASMA_RIFLE, 1 }, { PID_RIPPER, 1 }, { PID_PLASMA_PISTOL, 1 }, { PID_POWER_FIST, 1 }, { PID_MICRO_FUSION_CELL, 150 }, { PID_PLASMA_GRENADE, 5 }, {PID_GEIGER_COUNTER,1}, {PID_MOTION_SENSOR,1}  };
uint[][] en3 = {};

uint[][] arm1 = { { PID_SAND_ROBE, 1 }, { PID_LEATHER_ARMOR, 1 }, { PID_LEATHER_ARMOR_MK_II, 1 }, { PID_CURED_LEATHER_ARMOR, 1 }, { PID_GECKO_PELT, 1 }, { PID_GOLDEN_GECKO_PELT, 1 }, { PID_BRAHMIN_HIDE, 1 }, {PID_COMBAT_LEATHER_JACKET_HELMET,1}, {PID_LEATHER_ARMOR_HELMET,1}, {PID_LEATHER_ARMOR_HELMET_MK2,1} };
uint[][] arm2 = { { PID_TESLA_ARMOR, 1 }, { PID_COMBAT_ARMOR, 1 }, { PID_METAL_ARMOR, 1 }, { PID_METAL_ARMOR_MK_II, 1 }, { PID_COMBAT_ARMOR_MK_II, 1}, {PID_COMBAT_HELMET,1}, {PID_COMBAT_HELMET_MK_II,1}, {PID_METAL_HELMET,1}, {PID_METAL_HELMET_MK2,1}, {PID_TESLA_HELMET,1} };
uint[][] arm3 = {};

uint[][] drug1 = { { PID_BUFFOUT, 1 }, { PID_MENTATS, 1 }, { PID_PSYCHO, 1 }, { PID_RADAWAY, 1 }, { PID_RAD_X, 1 }, {PID_JET,1} };
uint[][] drug2 = {};
uint[][] drug3 = {};

uint[][] med1 = { { PID_STIMPAK, 1 }, { PID_SUPER_STIMPAK, 1 }, { PID_HEALING_POWDER, 1 }, { PID_ANTIDOTE, 1 }, { PID_JET_ANTIDOTE, 1}, {PID_HN_NEEDLER_CARTRIDGE, 10}, {PID_HN_AP_NEEDLER_CARTRIDGE, 10}, {PID_NEEDLER_PISTOL, 1}};
uint[][] med2 = {};
uint[][] med3 = {};

uint[][] misc1 = { { PID_KNIFE, 5 }, { PID_SPEAR, 1 }, { PID_THROWING_KNIFE, 5 }, { PID_SLEDGEHAMMER, 1 }, { PID_ROPE, 1 }, { PID_GECKO_PELT, 1 }, { PID_GOLDEN_GECKO_PELT, 1 }, { PID_BRAHMIN_HIDE, 1 },
                   { PID_AXE, 1 }, { PID_WATERBAG_EMPTY, 1 }, { PID_LOCKPICKS, 1 }, { PID_LOCK, 1 }, { PID_HOLODISK, 1 }, { PID_BOTTLE_GLASS, 1 } };
uint[][] misc2 = { { PID_SUPER_SLEDGE, 1 }, { PID_GECKO_PELT, 1 }, { PID_GOLDEN_GECKO_PELT, 1 }, { PID_BRAHMIN_HIDE, 1 }, { PID_FRAG_GRENADE, 5 }};
uint[][] misc3 = {};

uint[][] books1 = { { PID_CATS_PAW, 1 }, { PID_TECHNICAL_MANUAL, 1 }, { PID_CHEMISTRY_MANUAL, 1 }, { PID_BARTER_BOOK, 1}, { PID_FIRST_AID_BOOK, 1 }, { PID_SCOUT_HANDBOOK, 1 }, { PID_GUNS_AND_BULLETS, 1 }, { PID_BIG_BOOK_OF_SCIENCE, 1 }, { PID_DEANS_ELECTRONICS, 1 } };
uint[][] books2 = {};
uint[][] books3 = {};

uint[][] craft1 = { { PID_TECH_DELINER, 1 }, { PID_TECH_ELE_ENGINE, 1 }, { PID_TECH_SEMI_TRIGGER, 1 }, { PID_TECH_GUN_CONTROL, 1 }, { PID_TECH_AUTO_TRIGGER, 1 }, { PID_TECH_MECH_ENGINE, 1 }, { PID_ARM_LEATHER_HIDE, 1 }, { PID_ARM_POLYMER, 1 }, { PID_ARM_POLYMER_ADV, 1 }, { PID_ARM_POLYMER_LASER, 1 }, { PID_ARM_POLYCARBONITE, 1 }, { PID_ARM_STEEL, 1 }, { PID_ARM_GORETEX, 1 }, { PID_TECH_SCOPE, 1 }, { PID_TECH_MICROCHIPS, 1 }, { PID_TECH_CONDEN, 1 }, { PID_TECH_TRANSFORMATOR, 1 }, { PID_TECH_ELE_WIRES, 1 }, { PID_TECH_PLASMA, 1 }, { PID_ARM_CERAMIC, 1 }, { PID_ARM_KEVLAR, 1 }, { PID_ARM_CARBON, 1 } };
uint[][] craft2 = {};
uint[][] craft3 = {};

uint[][] @[] lists = { sg1, sg2, sg3, bg1, bg2, bg3, en1, en2, en3, arm1, arm2, arm3, drug1, drug2, drug3, med1, med2, med3, misc1, misc2, misc3, books1, books2, books3, craft1, craft2, craft3 };
